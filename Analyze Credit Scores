{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyzing borrowers’ risk of defaulting\n",
    "\n",
    "Your project is to prepare a report for a bank’s loan division. You’ll need to find out if a customer’s marital status and number of children has an impact on whether they will default on a loan. The bank already has some data on customers’ credit worthiness.\n",
    "\n",
    "Your report will be considered when building the **credit score** of a potential customer. The **credit score** is used to evaluate the ability of a potential borrower to repay their loan.\n",
    "\n",
    "[In this notebook you're provided with hints and brief instructions and thinking prompts. Don't ignore them as they are designed to equip you with the structure for the project and will help you analyze what you're doing on a deeper level. Before submitting your project, make sure you remove all hints and descriptions provided to you. Instead, make this report look as if you're sending it to your teammates to demonstrate your findings - they shouldn't know you had some external help from us! To help you out, we've placed the hints you should remove in square brackets.]\n",
    "\n",
    "[Before you dive into analyzing your data, explain the purposes of the project and hypotheses you're going to test.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Open the data file and have a look at the general information. \n",
    "\n",
    "[Start with importing the libraries and loading the data. You may realise that you need additional libraries as you go, which is totally fine - just make sure to update this section when you do.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading all the libraries\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('/datasets/credit_scoring_eng.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1. Data exploration\n",
    "\n",
    "**Description of the data**\n",
    "- `children` - the number of children in the family\n",
    "- `days_employed` - work experience in days\n",
    "- `dob_years` - client's age in years\n",
    "- `education` - client's education\n",
    "- `education_id` - education identifier\n",
    "- `family_status` - marital status\n",
    "- `family_status_id` - marital status identifier\n",
    "- `gender` - gender of the client\n",
    "- `income_type` - type of employment\n",
    "- `debt` - was there any debt on loan repayment\n",
    "- `total_income` - monthly income\n",
    "- `purpose` - the purpose of obtaining a loan\n",
    "\n",
    "[Now let's explore our data. You'll want to see how many columns and rows it has, look at a few rows to check for potential issues with the data.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21525, 12)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see how many rows and columns our dataset has\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-8437.673028</td>\n",
       "      <td>42</td>\n",
       "      <td>bachelor's degree</td>\n",
       "      <td>0</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>40620.102</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-4024.803754</td>\n",
       "      <td>36</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>17932.802</td>\n",
       "      <td>car purchase</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>-5623.422610</td>\n",
       "      <td>33</td>\n",
       "      <td>Secondary Education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>23341.752</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>-4124.747207</td>\n",
       "      <td>32</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>42820.568</td>\n",
       "      <td>supplementary education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>340266.072047</td>\n",
       "      <td>53</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>retiree</td>\n",
       "      <td>0</td>\n",
       "      <td>25378.572</td>\n",
       "      <td>to have a wedding</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>-926.185831</td>\n",
       "      <td>27</td>\n",
       "      <td>bachelor's degree</td>\n",
       "      <td>0</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>business</td>\n",
       "      <td>0</td>\n",
       "      <td>40922.170</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>-2879.202052</td>\n",
       "      <td>43</td>\n",
       "      <td>bachelor's degree</td>\n",
       "      <td>0</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>business</td>\n",
       "      <td>0</td>\n",
       "      <td>38484.156</td>\n",
       "      <td>housing transactions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>-152.779569</td>\n",
       "      <td>50</td>\n",
       "      <td>SECONDARY EDUCATION</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>21731.829</td>\n",
       "      <td>education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>-6929.865299</td>\n",
       "      <td>35</td>\n",
       "      <td>BACHELOR'S DEGREE</td>\n",
       "      <td>0</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>15337.093</td>\n",
       "      <td>having a wedding</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>-2188.756445</td>\n",
       "      <td>41</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>23108.150</td>\n",
       "      <td>purchase of the house for my family</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years            education  education_id  \\\n",
       "0         1   -8437.673028         42    bachelor's degree             0   \n",
       "1         1   -4024.803754         36  secondary education             1   \n",
       "2         0   -5623.422610         33  Secondary Education             1   \n",
       "3         3   -4124.747207         32  secondary education             1   \n",
       "4         0  340266.072047         53  secondary education             1   \n",
       "5         0    -926.185831         27    bachelor's degree             0   \n",
       "6         0   -2879.202052         43    bachelor's degree             0   \n",
       "7         0    -152.779569         50  SECONDARY EDUCATION             1   \n",
       "8         2   -6929.865299         35    BACHELOR'S DEGREE             0   \n",
       "9         0   -2188.756445         41  secondary education             1   \n",
       "\n",
       "       family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0            married                 0      F    employee     0     40620.102   \n",
       "1            married                 0      F    employee     0     17932.802   \n",
       "2            married                 0      M    employee     0     23341.752   \n",
       "3            married                 0      M    employee     0     42820.568   \n",
       "4  civil partnership                 1      F     retiree     0     25378.572   \n",
       "5  civil partnership                 1      M    business     0     40922.170   \n",
       "6            married                 0      F    business     0     38484.156   \n",
       "7            married                 0      M    employee     0     21731.829   \n",
       "8  civil partnership                 1      F    employee     0     15337.093   \n",
       "9            married                 0      M    employee     0     23108.150   \n",
       "\n",
       "                               purpose  \n",
       "0                purchase of the house  \n",
       "1                         car purchase  \n",
       "2                purchase of the house  \n",
       "3              supplementary education  \n",
       "4                    to have a wedding  \n",
       "5                purchase of the house  \n",
       "6                 housing transactions  \n",
       "7                            education  \n",
       "8                     having a wedding  \n",
       "9  purchase of the house for my family  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's print the first N rows\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe what you see and notice in your printed data sample. Are there any issues that may need further investigation and changes?]\n",
    "Issues I consider investigating:\n",
    "1. Days_Employed column: I will make all posotives because you can't work negative days\n",
    "2. Education column: I will make all lowercase for formatting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          8437.673028\n",
       "1          4024.803754\n",
       "2          5623.422610\n",
       "3          4124.747207\n",
       "4        340266.072047\n",
       "             ...      \n",
       "21520      4529.316663\n",
       "21521    343937.404131\n",
       "21522      2113.346888\n",
       "21523      3112.481705\n",
       "21524      1984.507589\n",
       "Name: days_employed, Length: 21525, dtype: float64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['days_employed'] = df['days_employed'].abs()\n",
    "df['days_employed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          bachelor's degree\n",
       "1        secondary education\n",
       "2        Secondary Education\n",
       "3        secondary education\n",
       "4        secondary education\n",
       "                ...         \n",
       "21520    secondary education\n",
       "21521    secondary education\n",
       "21522    secondary education\n",
       "21523    secondary education\n",
       "21524    secondary education\n",
       "Name: education, Length: 21525, dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['education'].apply(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      "children            21525 non-null int64\n",
      "days_employed       19351 non-null float64\n",
      "dob_years           21525 non-null int64\n",
      "education           21525 non-null object\n",
      "education_id        21525 non-null int64\n",
      "family_status       21525 non-null object\n",
      "family_status_id    21525 non-null int64\n",
      "gender              21525 non-null object\n",
      "income_type         21525 non-null object\n",
      "debt                21525 non-null int64\n",
      "total_income        19351 non-null float64\n",
      "purpose             21525 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# Get info on data\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Are there missing values across all columns or just a few? Briefly describe what you see in 1-2 sentences.]\n",
    "\n",
    "2/12 columns are missing values. The dataset has 21525 entries. The 'days_employed', 'total_income' columns are less than 21525. This means those columns are missing values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2174"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's look at the filtered table with missing values in the the first column with missing data\n",
    "df['days_employed'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Do missing values seem symmetric? Can we be sure in this assumption? Explain your thoughts briefly in this section. You may probably want to conduct further investigations, and count the missing values in all the rows with missing values to confirm the the missing samples are of the same size.]\n",
    "\n",
    "They are symmetric bc they both say 19351. The DataFrame has 21525 enteries, minus 19351, equals 2174 missing values for total_income and days_employed.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's apply multiple conditions for filtering data and look at the number of rows in the filtered table.\n",
    "filtered_table_days_employed = df['days_employed'].value_counts(dropna=False)\n",
    "filtered_table_total_income = df['total_income'].value_counts(dropna=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Intermediate conclusion**\n",
    "\n",
    "[Does the number of rows in the filtered table match the number of missing values? What conclusion can we make from this?] \n",
    "The number of rows DOES match the filtered table number of missing values. I conclude the missing values are symmetric of the missing sample size\n",
    "\n",
    "[Calculate the percentage of the missing values compared to the whole dataset. Is it a considerably large piece of data? If so, you may want to fill the missing values. To do that, firstly we should consider whether the missing data could be due to the specific client characteristic, such as employment type or something else. You will need to decide which characteristic *you* think might be the reason. Secondly, we should check whether there's any dependence missing values have on the value of other indicators with the columns with identified specific client characteristic.]\n",
    "Divide 19351 by 21525 and multiply that by 100 - you get roughly 89.9% \n",
    "Professionally I prefer to be closer to 100%. In my opinion, the missing data is a result of unclear information for the developer of the data. \n",
    "\n",
    "[Explain your next steps and how they correlate with the conclusions you made so far.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "children               0\n",
       "days_employed       2174\n",
       "dob_years              0\n",
       "education              0\n",
       "education_id           0\n",
       "family_status          0\n",
       "family_status_id       0\n",
       "gender                 0\n",
       "income_type            0\n",
       "debt                   0\n",
       "total_income        2174\n",
       "purpose                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's investigate clients who do not have data on identified characteristic and the column with the missing values\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NaN          2174\n",
       "17312.717       2\n",
       "31791.384       2\n",
       "42413.096       2\n",
       "22435.069       1\n",
       "             ... \n",
       "23834.534       1\n",
       "26124.613       1\n",
       "28692.182       1\n",
       "28477.783       1\n",
       "41428.916       1\n",
       "Name: total_income, Length: 19349, dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking distribution\n",
    "df['days_employed'].value_counts(dropna=False)\n",
    "df['total_income'].value_counts(dropna=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe your findings here.]\n",
    "**Possible reasons for missing values in data** \n",
    "'I observe that days_employed and total_income both have 2174 missing values.'\n",
    "'I consider the possibility that 2174 people chose not to provide this information'\n",
    "\n",
    "[Propose your ideas on why you think the values might be missing. Do you think they are missing randomly or there are any patterns?]\n",
    "'I use the logic that a person might not have income if they are not employed'\n",
    "'With this logic I conclude this was not random, but intentional'\n",
    "\n",
    "[Let's start checking why the missing values are not random.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "children\n",
      " 0     0.657329\n",
      " 1     0.223833\n",
      " 2     0.095470\n",
      " 3     0.015331\n",
      " 20    0.003531\n",
      "-1     0.002184\n",
      " 4     0.001905\n",
      " 5     0.000418\n",
      "Name: children, dtype: float64\n",
      "days_employed\n",
      "986.927316     0.000052\n",
      "7026.359174    0.000052\n",
      "4236.274243    0.000052\n",
      "6620.396473    0.000052\n",
      "1238.560080    0.000052\n",
      "                 ...   \n",
      "2849.351119    0.000052\n",
      "5619.328204    0.000052\n",
      "448.829898     0.000052\n",
      "1687.038672    0.000052\n",
      "582.538413     0.000052\n",
      "Name: days_employed, Length: 19351, dtype: float64\n",
      "dob_years\n",
      "35    0.028664\n",
      "40    0.028293\n",
      "41    0.028200\n",
      "34    0.028014\n",
      "38    0.027782\n",
      "42    0.027735\n",
      "33    0.026992\n",
      "39    0.026620\n",
      "31    0.026016\n",
      "36    0.025784\n",
      "44    0.025412\n",
      "29    0.025319\n",
      "30    0.025087\n",
      "48    0.024994\n",
      "37    0.024948\n",
      "50    0.023879\n",
      "43    0.023833\n",
      "32    0.023693\n",
      "49    0.023600\n",
      "28    0.023368\n",
      "45    0.023089\n",
      "27    0.022904\n",
      "56    0.022625\n",
      "52    0.022485\n",
      "47    0.022300\n",
      "54    0.022253\n",
      "46    0.022067\n",
      "58    0.021417\n",
      "57    0.021370\n",
      "53    0.021324\n",
      "51    0.020813\n",
      "59    0.020627\n",
      "55    0.020581\n",
      "26    0.018955\n",
      "60    0.017515\n",
      "25    0.016585\n",
      "61    0.016492\n",
      "62    0.016353\n",
      "63    0.012497\n",
      "64    0.012311\n",
      "24    0.012265\n",
      "23    0.011800\n",
      "65    0.009013\n",
      "66    0.008502\n",
      "22    0.008502\n",
      "67    0.007758\n",
      "21    0.005157\n",
      "0     0.004692\n",
      "68    0.004599\n",
      "69    0.003949\n",
      "70    0.003020\n",
      "71    0.002695\n",
      "20    0.002369\n",
      "72    0.001533\n",
      "19    0.000650\n",
      "73    0.000372\n",
      "74    0.000279\n",
      "75    0.000046\n",
      "Name: dob_years, dtype: float64\n",
      "education\n",
      "secondary education    0.638792\n",
      "bachelor's degree      0.219187\n",
      "SECONDARY EDUCATION    0.035865\n",
      "Secondary Education    0.033031\n",
      "some college           0.031034\n",
      "BACHELOR'S DEGREE      0.012729\n",
      "Bachelor's Degree      0.012451\n",
      "primary education      0.011614\n",
      "Some College           0.002184\n",
      "SOME COLLEGE           0.001347\n",
      "PRIMARY EDUCATION      0.000790\n",
      "Primary Education      0.000697\n",
      "graduate degree        0.000186\n",
      "GRADUATE DEGREE        0.000046\n",
      "Graduate Degree        0.000046\n",
      "Name: education, dtype: float64\n",
      "education_id\n",
      "1    0.707689\n",
      "0    0.244367\n",
      "2    0.034564\n",
      "3    0.013101\n",
      "4    0.000279\n",
      "Name: education_id, dtype: float64\n",
      "family_status\n",
      "married              0.575145\n",
      "civil partnership    0.194053\n",
      "unmarried            0.130685\n",
      "divorced             0.055517\n",
      "widow / widower      0.044599\n",
      "Name: family_status, dtype: float64\n",
      "family_status_id\n",
      "0    0.575145\n",
      "1    0.194053\n",
      "4    0.130685\n",
      "3    0.055517\n",
      "2    0.044599\n",
      "Name: family_status_id, dtype: float64\n",
      "gender\n",
      "F      0.661370\n",
      "M      0.338583\n",
      "XNA    0.000046\n",
      "Name: gender, dtype: float64\n",
      "income_type\n",
      "employee                       0.516562\n",
      "business                       0.236237\n",
      "retiree                        0.179141\n",
      "civil servant                  0.067782\n",
      "unemployed                     0.000093\n",
      "entrepreneur                   0.000093\n",
      "paternity / maternity leave    0.000046\n",
      "student                        0.000046\n",
      "Name: income_type, dtype: float64\n",
      "debt\n",
      "0    0.919117\n",
      "1    0.080883\n",
      "Name: debt, dtype: float64\n",
      "total_income\n",
      "17312.717    0.000103\n",
      "31791.384    0.000103\n",
      "42413.096    0.000103\n",
      "54857.666    0.000052\n",
      "26935.722    0.000052\n",
      "               ...   \n",
      "48796.341    0.000052\n",
      "34774.610    0.000052\n",
      "15710.698    0.000052\n",
      "19232.334    0.000052\n",
      "9591.824     0.000052\n",
      "Name: total_income, Length: 19348, dtype: float64\n",
      "purpose\n",
      "wedding ceremony                            0.037027\n",
      "having a wedding                            0.036098\n",
      "to have a wedding                           0.035958\n",
      "real estate transactions                    0.031405\n",
      "buy commercial real estate                  0.030848\n",
      "buying property for renting out             0.030337\n",
      "housing transactions                        0.030337\n",
      "transactions with commercial real estate    0.030244\n",
      "purchase of the house                       0.030058\n",
      "housing                                     0.030058\n",
      "purchase of the house for my family         0.029779\n",
      "construction of own property                0.029501\n",
      "property                                    0.029454\n",
      "transactions with my real estate            0.029268\n",
      "building a real estate                      0.029082\n",
      "buy real estate                             0.028990\n",
      "purchase of my own house                    0.028804\n",
      "building a property                         0.028804\n",
      "housing renovation                          0.028432\n",
      "buy residential real estate                 0.028200\n",
      "buying my own car                           0.023461\n",
      "going to university                         0.023043\n",
      "car                                         0.022997\n",
      "second-hand car purchase                    0.022718\n",
      "to own a car                                0.022300\n",
      "buying a second-hand car                    0.022253\n",
      "cars                                        0.022207\n",
      "to buy a car                                0.021928\n",
      "car purchase                                0.021463\n",
      "supplementary education                     0.021463\n",
      "purchase of a car                           0.021138\n",
      "university education                        0.021045\n",
      "to get a supplementary education            0.020767\n",
      "education                                   0.020767\n",
      "getting an education                        0.020581\n",
      "profile education                           0.020256\n",
      "getting higher education                    0.019791\n",
      "to become educated                          0.019141\n",
      "Name: purpose, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Checking the distribution in the whole dataset\n",
    "for x in df.columns:\n",
    "    print(x)\n",
    "    print(df[x].value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Intermediate conclusion**\n",
    "\n",
    "[Is the distribution in the original dataset similar to the distribution of the filtered table? What does that mean for us?]\n",
    "\n",
    "[If you think we can't make any conclusions yet, let's investigate our dataset further. Let's think about other reasons that could lead to data missing and check if we can find any patterns that may lead us to thinking that the missing values are not random. Because this is your work, this is section is optional.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7.84190715e-05, 1.51561079e-04, 1.00000000e+00])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print unique values\n",
    "visits = df.groupby('gender')['total_income'].value_counts(normalize=True)\n",
    "visits.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Intermediate conclusion**\n",
    "\n",
    "[Can we finally confirm that missing values are accidental? Check for anything else that you think might be important here.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>retiree</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>to have a wedding</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>civil servant</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>unmarried</td>\n",
       "      <td>4</td>\n",
       "      <td>F</td>\n",
       "      <td>retiree</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>building a real estate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>civil servant</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>second-hand car purchase</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>54</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>retiree</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>to have a wedding</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21489</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47</td>\n",
       "      <td>Secondary Education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>business</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>purchase of a car</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21495</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>wedding ceremony</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21497</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48</td>\n",
       "      <td>BACHELOR'S DEGREE</td>\n",
       "      <td>0</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>business</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>building a property</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21502</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>building a real estate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21510</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>car purchase</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2174 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       children  days_employed  dob_years            education  education_id  \\\n",
       "12            0            NaN         65  secondary education             1   \n",
       "26            0            NaN         41  secondary education             1   \n",
       "29            0            NaN         63  secondary education             1   \n",
       "41            0            NaN         50  secondary education             1   \n",
       "55            0            NaN         54  secondary education             1   \n",
       "...         ...            ...        ...                  ...           ...   \n",
       "21489         2            NaN         47  Secondary Education             1   \n",
       "21495         1            NaN         50  secondary education             1   \n",
       "21497         0            NaN         48    BACHELOR'S DEGREE             0   \n",
       "21502         1            NaN         42  secondary education             1   \n",
       "21510         2            NaN         28  secondary education             1   \n",
       "\n",
       "           family_status  family_status_id gender    income_type  debt  \\\n",
       "12     civil partnership                 1      M        retiree     0   \n",
       "26               married                 0      M  civil servant     0   \n",
       "29             unmarried                 4      F        retiree     0   \n",
       "41               married                 0      F  civil servant     0   \n",
       "55     civil partnership                 1      F        retiree     1   \n",
       "...                  ...               ...    ...            ...   ...   \n",
       "21489            married                 0      M       business     0   \n",
       "21495  civil partnership                 1      F       employee     0   \n",
       "21497            married                 0      F       business     0   \n",
       "21502            married                 0      F       employee     0   \n",
       "21510            married                 0      F       employee     0   \n",
       "\n",
       "       total_income                   purpose  \n",
       "12              NaN         to have a wedding  \n",
       "26              NaN                 education  \n",
       "29              NaN    building a real estate  \n",
       "41              NaN  second-hand car purchase  \n",
       "55              NaN         to have a wedding  \n",
       "...             ...                       ...  \n",
       "21489           NaN         purchase of a car  \n",
       "21495           NaN          wedding ceremony  \n",
       "21497           NaN       building a property  \n",
       "21502           NaN    building a real estate  \n",
       "21510           NaN              car purchase  \n",
       "\n",
       "[2174 rows x 12 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['total_income'].isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>2174.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2174.000000</td>\n",
       "      <td>2174.000000</td>\n",
       "      <td>2174.000000</td>\n",
       "      <td>2174.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>0.552438</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.632015</td>\n",
       "      <td>0.800828</td>\n",
       "      <td>0.975161</td>\n",
       "      <td>0.078197</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>1.469356</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.531481</td>\n",
       "      <td>0.530157</td>\n",
       "      <td>1.418220</td>\n",
       "      <td>0.268543</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          children  days_employed    dob_years  education_id  \\\n",
       "count  2174.000000            0.0  2174.000000   2174.000000   \n",
       "mean      0.552438            NaN    43.632015      0.800828   \n",
       "std       1.469356            NaN    12.531481      0.530157   \n",
       "min      -1.000000            NaN     0.000000      0.000000   \n",
       "25%       0.000000            NaN    34.000000      0.250000   \n",
       "50%       0.000000            NaN    43.000000      1.000000   \n",
       "75%       1.000000            NaN    54.000000      1.000000   \n",
       "max      20.000000            NaN    73.000000      3.000000   \n",
       "\n",
       "       family_status_id         debt  total_income  \n",
       "count       2174.000000  2174.000000           0.0  \n",
       "mean           0.975161     0.078197           NaN  \n",
       "std            1.418220     0.268543           NaN  \n",
       "min            0.000000     0.000000           NaN  \n",
       "25%            0.000000     0.000000           NaN  \n",
       "50%            0.000000     0.000000           NaN  \n",
       "75%            1.000000     0.000000           NaN  \n",
       "max            4.000000     1.000000           NaN  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for other reasons and patterns that could lead to missing values\n",
    "df.loc[df['total_income'].isna()].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "Checking for other patterns - explain which\n",
    "\n",
    "I conclude the pattern is established above. \n",
    "I conclude that days_employted and total_income have missing values for the same clients."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusions**\n",
    "\n",
    "[Did you find any patterns? How did you come to this conclusion?]\n",
    "I oberseve a count of 19348 and 19348 unique values. \n",
    "[Explain how you will address the missing values. Consider the categories in which values are missing.]\n",
    "'I believe the best thing would be to change the missing values to None.'\n",
    "[Briefly plan your next steps for transforming data. You will probably need to address different types of issues: duplicates, different registers, incorrect artifacts, and missing values.]\n",
    "I need to fix education, days_employed, "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data transformation\n",
    "\n",
    "[Let's go through each column to see what issues we may have in them.]\n",
    "\n",
    "[Begin with removing duplicates and fixing educational information if required.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "secondary education    13750\n",
       "bachelor's degree       4718\n",
       "SECONDARY EDUCATION      772\n",
       "Secondary Education      711\n",
       "some college             668\n",
       "BACHELOR'S DEGREE        274\n",
       "Bachelor's Degree        268\n",
       "primary education        250\n",
       "Some College              47\n",
       "SOME COLLEGE              29\n",
       "PRIMARY EDUCATION         17\n",
       "Primary Education         15\n",
       "graduate degree            4\n",
       "GRADUATE DEGREE            1\n",
       "Graduate Degree            1\n",
       "Name: education, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see all values in education column to check if and what spellings will need to be fixed\n",
    "df['education'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          bachelor's degree\n",
       "1        secondary education\n",
       "2        secondary education\n",
       "3        secondary education\n",
       "4        secondary education\n",
       "                ...         \n",
       "21520    secondary education\n",
       "21521    secondary education\n",
       "21522    secondary education\n",
       "21523    secondary education\n",
       "21524    secondary education\n",
       "Name: education, Length: 21525, dtype: object"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fix the registers if required\n",
    "df['education'] = df['education'].str.lower()\n",
    "df['education']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['days_employed'] = df['days_employed'].abs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(secondary education    15233\n",
       " bachelor's degree       5260\n",
       " some college             744\n",
       " primary education        282\n",
       " graduate degree            6\n",
       " Name: education, dtype: int64,\n",
       " 986.927316     1\n",
       " 7026.359174    1\n",
       " 4236.274243    1\n",
       " 6620.396473    1\n",
       " 1238.560080    1\n",
       "               ..\n",
       " 2849.351119    1\n",
       " 5619.328204    1\n",
       " 448.829898     1\n",
       " 1687.038672    1\n",
       " 582.538413     1\n",
       " Name: days_employed, Length: 19351, dtype: int64)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking all the values in the column to make sure we fixed them\n",
    "df['education'].value_counts(),df['days_employed'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Check the data the `children` column]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0     14149\n",
      " 1      4818\n",
      " 2      2055\n",
      " 3       330\n",
      " 20       76\n",
      "-1        47\n",
      " 4        41\n",
      " 5         9\n",
      "Name: children, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Let's see the distribution of values in the `children` column\n",
    "print(df['children'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Are there any strange things in the column? If yes, how high is the percentage of problematic data? How could they have occurred? Make a decision on what you will do with this data and explain you reasoning.]\n",
    "\n",
    "I observe '-1' as an illogical value for number of children. This accounts for (47/21525)*100 = 0.22% of the data. I will assume the negative symbol was not intentional. Therefore, adding the enteries for -1 children to the 1 child column is my choice. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0     14149\n",
       " 1      4818\n",
       " 2      2055\n",
       " 3       330\n",
       " 20       76\n",
       "-1        47\n",
       " 4        41\n",
       " 5         9\n",
       "Name: children, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the `children` column again to make sure it's all fixed\n",
    "df['children'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Check the data in the `days_employed` column. Firstly think about what kind of issues could there be and what you may want to check and how you will do it.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "986.927316     1\n",
       "7026.359174    1\n",
       "4236.274243    1\n",
       "6620.396473    1\n",
       "1238.560080    1\n",
       "              ..\n",
       "2849.351119    1\n",
       "5619.328204    1\n",
       "448.829898     1\n",
       "1687.038672    1\n",
       "582.538413     1\n",
       "Name: days_employed, Length: 19351, dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find problematic data in `days_employed`, if they exist, and calculate the percentage\n",
    "df['days_employed'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[If the amount of problematic data is high, it could've been due to some technical issues. We may probably want to propose the most obvious reason why it could've happened and what the correct data might've been, as we can't drop these problematic rows.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          8437.673028\n",
       "1          4024.803754\n",
       "2          5623.422610\n",
       "3          4124.747207\n",
       "4        340266.072047\n",
       "             ...      \n",
       "21520      4529.316663\n",
       "21521    343937.404131\n",
       "21522      2113.346888\n",
       "21523      3112.481705\n",
       "21524      1984.507589\n",
       "Name: days_employed, Length: 21525, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Address the problematic values, if they exist\n",
    "df['days_employed'] = df['days_employed'].abs()\n",
    "df['days_employed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "986.927316     1\n",
       "7026.359174    1\n",
       "4236.274243    1\n",
       "6620.396473    1\n",
       "1238.560080    1\n",
       "              ..\n",
       "2849.351119    1\n",
       "5619.328204    1\n",
       "448.829898     1\n",
       "1687.038672    1\n",
       "582.538413     1\n",
       "Name: days_employed, Length: 19351, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the result - make sure it's fixed\n",
    "df['days_employed'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Let's now look at the client's age and whether there are any issues there. Again, think about what can data can be strange in this column, i.e. what cannot be someone's age.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35    617\n",
       "40    609\n",
       "41    607\n",
       "34    603\n",
       "38    598\n",
       "42    597\n",
       "33    581\n",
       "39    573\n",
       "31    560\n",
       "36    555\n",
       "44    547\n",
       "29    545\n",
       "30    540\n",
       "48    538\n",
       "37    537\n",
       "50    514\n",
       "43    513\n",
       "32    510\n",
       "49    508\n",
       "28    503\n",
       "45    497\n",
       "27    493\n",
       "56    487\n",
       "52    484\n",
       "47    480\n",
       "54    479\n",
       "46    475\n",
       "58    461\n",
       "57    460\n",
       "53    459\n",
       "51    448\n",
       "59    444\n",
       "55    443\n",
       "26    408\n",
       "60    377\n",
       "25    357\n",
       "61    355\n",
       "62    352\n",
       "63    269\n",
       "64    265\n",
       "24    264\n",
       "23    254\n",
       "65    194\n",
       "66    183\n",
       "22    183\n",
       "67    167\n",
       "21    111\n",
       "0     101\n",
       "68     99\n",
       "69     85\n",
       "70     65\n",
       "71     58\n",
       "20     51\n",
       "72     33\n",
       "19     14\n",
       "73      8\n",
       "74      6\n",
       "75      1\n",
       "Name: dob_years, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the `dob_years` for suspicious values and count the percentage\n",
    "df['dob_years'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Decide what you'll do with the problematic values and explain why.]\n",
    "\n",
    "It's illogical for this column to have '0' as a value for age. I assume this means the person filling out the form left it blank. I will convert the value of '0' to NaN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Address the issues in the `dob_years` column, if they exist\n",
    "df['dob_years'] = df['dob_years'].isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    21525\n",
       "Name: dob_years, dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the result - make sure it's fixed\n",
    "df['dob_years'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Now let's check the `family_status` column. See what kind of values there are and what problems you may need to address.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "married              12380\n",
       "civil partnership     4177\n",
       "unmarried             2813\n",
       "divorced              1195\n",
       "widow / widower        960\n",
       "Name: family_status, dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the values for the column\n",
    "df['family_status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nothing wrong with family_status\n"
     ]
    }
   ],
   "source": [
    "# Address the problematic values in `family_status`, if they exist\n",
    "print ('nothing wrong with family_status')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nothing wrong with family_status\n"
     ]
    }
   ],
   "source": [
    "# Check the result - make sure it's fixed\n",
    "print ('nothing wrong with family_status')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Now let's check the `gender` column. See what kind of values there are and what problems you may need to address]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F      14236\n",
       "M       7288\n",
       "XNA        1\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the values in the column\n",
    "df['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8437.673028</td>\n",
       "      <td>False</td>\n",
       "      <td>bachelor's degree</td>\n",
       "      <td>0</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>40620.102</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4024.803754</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>17932.802</td>\n",
       "      <td>car purchase</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5623.422610</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>23341.752</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4124.747207</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>42820.568</td>\n",
       "      <td>supplementary education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>340266.072047</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>retiree</td>\n",
       "      <td>0</td>\n",
       "      <td>25378.572</td>\n",
       "      <td>to have a wedding</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years            education  education_id  \\\n",
       "0         1    8437.673028      False    bachelor's degree             0   \n",
       "1         1    4024.803754      False  secondary education             1   \n",
       "2         0    5623.422610      False  secondary education             1   \n",
       "3         3    4124.747207      False  secondary education             1   \n",
       "4         0  340266.072047      False  secondary education             1   \n",
       "\n",
       "       family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0            married                 0      F    employee     0     40620.102   \n",
       "1            married                 0      F    employee     0     17932.802   \n",
       "2            married                 0      M    employee     0     23341.752   \n",
       "3            married                 0      M    employee     0     42820.568   \n",
       "4  civil partnership                 1      F     retiree     0     25378.572   \n",
       "\n",
       "                   purpose  \n",
       "0    purchase of the house  \n",
       "1             car purchase  \n",
       "2    purchase of the house  \n",
       "3  supplementary education  \n",
       "4        to have a wedding  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Address the problematic values, if they exist\n",
    "df = df.loc[df['gender']!='XNA']\n",
    "df.head()\n",
    "#df['gender'].drop(['XNA',axis = 0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F    14236\n",
       "M     7288\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the result - make sure it's fixed\n",
    "\n",
    "df['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Now let's check the `income_type` column. See what kind of values there are and what problems you may need to address]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "employee                       11119\n",
       "business                        5084\n",
       "retiree                         3856\n",
       "civil servant                   1459\n",
       "unemployed                         2\n",
       "entrepreneur                       2\n",
       "paternity / maternity leave        1\n",
       "student                            1\n",
       "Name: income_type, dtype: int64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the values in the column\n",
    "df['income_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "children\n",
      " 0     0.657313\n",
      " 1     0.223843\n",
      " 2     0.095475\n",
      " 3     0.015332\n",
      " 20    0.003531\n",
      "-1     0.002184\n",
      " 4     0.001905\n",
      " 5     0.000418\n",
      "Name: children, dtype: float64\n",
      "days_employed\n",
      "986.927316     0.000052\n",
      "7026.359174    0.000052\n",
      "4236.274243    0.000052\n",
      "6620.396473    0.000052\n",
      "1238.560080    0.000052\n",
      "                 ...   \n",
      "5619.328204    0.000052\n",
      "448.829898     0.000052\n",
      "1687.038672    0.000052\n",
      "2348.524271    0.000052\n",
      "582.538413     0.000052\n",
      "Name: days_employed, Length: 19350, dtype: float64\n",
      "dob_years\n",
      "False    1.0\n",
      "Name: dob_years, dtype: float64\n",
      "education\n",
      "secondary education    0.707722\n",
      "bachelor's degree      0.244378\n",
      "some college           0.034520\n",
      "primary education      0.013102\n",
      "graduate degree        0.000279\n",
      "Name: education, dtype: float64\n",
      "education_id\n",
      "1    0.707722\n",
      "0    0.244378\n",
      "2    0.034520\n",
      "3    0.013102\n",
      "4    0.000279\n",
      "Name: education_id, dtype: float64\n",
      "family_status\n",
      "married              0.575172\n",
      "civil partnership    0.194016\n",
      "unmarried            0.130691\n",
      "divorced             0.055519\n",
      "widow / widower      0.044601\n",
      "Name: family_status, dtype: float64\n",
      "family_status_id\n",
      "0    0.575172\n",
      "1    0.194016\n",
      "4    0.130691\n",
      "3    0.055519\n",
      "2    0.044601\n",
      "Name: family_status_id, dtype: float64\n",
      "gender\n",
      "F    0.661401\n",
      "M    0.338599\n",
      "Name: gender, dtype: float64\n",
      "income_type\n",
      "employee                       0.516586\n",
      "business                       0.236201\n",
      "retiree                        0.179149\n",
      "civil servant                  0.067785\n",
      "unemployed                     0.000093\n",
      "entrepreneur                   0.000093\n",
      "paternity / maternity leave    0.000046\n",
      "student                        0.000046\n",
      "Name: income_type, dtype: float64\n",
      "debt\n",
      "0    0.919114\n",
      "1    0.080886\n",
      "Name: debt, dtype: float64\n",
      "total_income\n",
      "17312.717    0.000103\n",
      "31791.384    0.000103\n",
      "42413.096    0.000103\n",
      "54857.666    0.000052\n",
      "14929.232    0.000052\n",
      "               ...   \n",
      "48796.341    0.000052\n",
      "34774.610    0.000052\n",
      "15710.698    0.000052\n",
      "19232.334    0.000052\n",
      "9591.824     0.000052\n",
      "Name: total_income, Length: 19347, dtype: float64\n",
      "purpose\n",
      "wedding ceremony                            0.037028\n",
      "having a wedding                            0.036099\n",
      "to have a wedding                           0.035960\n",
      "real estate transactions                    0.031407\n",
      "buy commercial real estate                  0.030849\n",
      "buying property for renting out             0.030338\n",
      "housing transactions                        0.030338\n",
      "transactions with commercial real estate    0.030245\n",
      "purchase of the house                       0.030059\n",
      "housing                                     0.030059\n",
      "purchase of the house for my family         0.029781\n",
      "construction of own property                0.029502\n",
      "property                                    0.029455\n",
      "transactions with my real estate            0.029270\n",
      "building a real estate                      0.029084\n",
      "buy real estate                             0.028944\n",
      "purchase of my own house                    0.028805\n",
      "building a property                         0.028805\n",
      "housing renovation                          0.028433\n",
      "buy residential real estate                 0.028201\n",
      "buying my own car                           0.023462\n",
      "going to university                         0.023044\n",
      "car                                         0.022998\n",
      "second-hand car purchase                    0.022719\n",
      "to own a car                                0.022301\n",
      "buying a second-hand car                    0.022254\n",
      "cars                                        0.022208\n",
      "to buy a car                                0.021929\n",
      "car purchase                                0.021464\n",
      "supplementary education                     0.021464\n",
      "purchase of a car                           0.021139\n",
      "university education                        0.021046\n",
      "to get a supplementary education            0.020768\n",
      "education                                   0.020768\n",
      "getting an education                        0.020582\n",
      "profile education                           0.020256\n",
      "getting higher education                    0.019792\n",
      "to become educated                          0.019141\n",
      "Name: purpose, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Address the problematic values, if they exist\n",
    "# -1 children is the problematic value so I will remove it\n",
    "for x in df.columns:\n",
    "    print(x)\n",
    "    print(df[x].value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8437.673028</td>\n",
       "      <td>False</td>\n",
       "      <td>bachelor's degree</td>\n",
       "      <td>0</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>40620.102</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4024.803754</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>17932.802</td>\n",
       "      <td>car purchase</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5623.422610</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>23341.752</td>\n",
       "      <td>purchase of the house</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4124.747207</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>married</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>employee</td>\n",
       "      <td>0</td>\n",
       "      <td>42820.568</td>\n",
       "      <td>supplementary education</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>340266.072047</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>retiree</td>\n",
       "      <td>0</td>\n",
       "      <td>25378.572</td>\n",
       "      <td>to have a wedding</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years            education  education_id  \\\n",
       "0         1    8437.673028      False    bachelor's degree             0   \n",
       "1         1    4024.803754      False  secondary education             1   \n",
       "2         0    5623.422610      False  secondary education             1   \n",
       "3         3    4124.747207      False  secondary education             1   \n",
       "4         0  340266.072047      False  secondary education             1   \n",
       "\n",
       "       family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0            married                 0      F    employee     0     40620.102   \n",
       "1            married                 0      F    employee     0     17932.802   \n",
       "2            married                 0      M    employee     0     23341.752   \n",
       "3            married                 0      M    employee     0     42820.568   \n",
       "4  civil partnership                 1      F     retiree     0     25378.572   \n",
       "\n",
       "                   purpose  \n",
       "0    purchase of the house  \n",
       "1             car purchase  \n",
       "2    purchase of the house  \n",
       "3  supplementary education  \n",
       "4        to have a wedding  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing -1 in children\n",
    "df = df.loc[(df['children']!= -1)&(df['children']!= 20)]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we removed gender_debt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    14148\n",
       "1     4818\n",
       "2     2055\n",
       "3      330\n",
       "4       41\n",
       "5        9\n",
       "Name: children, dtype: int64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the result - make sure it's fixed\n",
    "df['children'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Now let's see if we have any duplicates in our data. If we do, you'll need to decide what you will do with them and explain why.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "768"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking duplicates\n",
    "\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Address the duplicates, if they exist\n",
    "df = df.drop_duplicates().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Last check whether we have any duplicates\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((20633, 12),\n",
       " Index(['children', 'days_employed', 'dob_years', 'education', 'education_id',\n",
       "        'family_status', 'family_status_id', 'gender', 'income_type', 'debt',\n",
       "        'total_income', 'purpose'],\n",
       "       dtype='object'))"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the size of the dataset that you now have after your first manipulations with it\n",
    "df.shape, df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe your new dataset: briefly say what's changed and what's the percentage of the changes, if there were any.]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Checked for duplicates, removed duplicates, number of rows decreased by 4.14% in dataframe. \n",
    "\n",
    "Also new column for Index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95.85598141695702"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(20633/21525)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.144018583042978"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100-95.85598141695702"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Working with missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[To speed up working with some data, you may want to work with dictionaries for some values, where IDs are provided. Explain why and which dictionaries you will work with.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['children', 'days_employed', 'dob_years', 'education', 'education_id',\n",
       "       'family_status', 'family_status_id', 'gender', 'income_type', 'debt',\n",
       "       'total_income', 'purpose'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the dictionaries\n",
    "df.columns.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Restoring missing values in `total_income`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Briefly state which column(s) have values missing that you need to address. Explain how you will fix them.]\n",
    "\n",
    "\n",
    "[Start with addressing total income missing values. Create and age category for clients. Create a new column with the age category. This strategy can help with calculating values for the total income.]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The client is : \n"
     ]
    }
   ],
   "source": [
    "# Let's write a function that calculates the age category\n",
    "\n",
    "print(\"The client is : \")\n",
    "\n",
    "def age_category(dob_years):\n",
    "    if dob_years >= 20 and dob_years <= 35:\n",
    "        return 'Young Adult'\n",
    "    elif dob_years >= 36 and dob_years <= 50:\n",
    "        return 'Middle Aged'\n",
    "    elif dob_years >= 51 and dob_years <=75:\n",
    "        return 'Senior'\n",
    "    else:\n",
    "        return 'Not in DataFrame'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Call Function and Create Column : \n",
      "Young Adult\n",
      "Not in DataFrame\n",
      "Senior\n"
     ]
    }
   ],
   "source": [
    "# Test if the function works and create new column\n",
    "print('Call Function and Create Column : ')\n",
    "\n",
    "df['age_category'] = df['dob_years'].apply(age_category)\n",
    "print(age_category(27))\n",
    "print(age_category(17))\n",
    "print(age_category(66))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Check New Column\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Not in DataFrame    20633\n",
       "Name: age_category, dtype: int64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check new column values based on the function we created\n",
    "print('Check New Column')\n",
    "df['age_category'].value_counts()\n",
    "#df['new_age_value'] = pd.DataFrame(df['dob_years'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Think about the factors on which income usually depends. Eventually, you will want to find out whether you should use mean or median values for replacing missing values. To make this decision you will probably want to look at the distribution of the factors you identified as impacting one's income.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Create a table that only has data without missing values. This data will be used to restore the missing values.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "children            0\n",
       "days_employed       0\n",
       "dob_years           0\n",
       "education           0\n",
       "education_id        0\n",
       "family_status       0\n",
       "family_status_id    0\n",
       "gender              0\n",
       "income_type         0\n",
       "debt                0\n",
       "total_income        0\n",
       "purpose             0\n",
       "age_category        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a table without missing values and print a few of its rows to make sure it looks fine\n",
    "without_missing_values = df[df.notna().all(axis=1)]\n",
    "without_missing_values.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26791.503175061076\n"
     ]
    }
   ],
   "source": [
    "# Look at the mean values for income based on your identified factors\n",
    "mean_income = without_missing_values['total_income'].mean()\n",
    "print(mean_income)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23202.87\n"
     ]
    }
   ],
   "source": [
    "# Look at the median values for income based on your identified factors\n",
    "median_income = without_missing_values['total_income'].median()\n",
    "print(median_income)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     19239.000000\n",
       "mean      26791.503175\n",
       "std       16497.194890\n",
       "min        3306.762000\n",
       "25%       16479.999500\n",
       "50%       23202.870000\n",
       "75%       32549.611000\n",
       "max      362496.645000\n",
       "Name: total_income, dtype: float64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['total_income'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Repeat such comparisons for multiple factors. Make sure you consider different aspects and explain your thinking process.]\n",
    "median because it isn't manipulated by large values.The mean is used for normal distributions, because it's influnced by outliers\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Make a decision on what characteristics define income most and whether you will use a median or a mean. Explain why you made this decision]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Write a function that we will use for filling in missing values\n",
    "\n",
    "\n",
    "def fill_missing_values(fill_col, fill_value, cat_1, cat_2):\n",
    "    df[fill_col] = df[fill_col].fillna(df.groupby([cat_1 , cat_2])[fill_col].transform(fill_value))\n",
    "    return df[fill_col].isna().sum()        \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if it works\n",
    "# Apply it to every row\n",
    "fill_missing_values(fill_col='total_income', fill_value='median', cat_1='gender', cat_2='debt') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gender  debt\n",
       "F       0       21470.354\n",
       "        1       21346.304\n",
       "M       0       27099.601\n",
       "        1       25518.842\n",
       "XNA     0       32624.825\n",
       "Name: total_income, dtype: float64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if we got any errors\n",
    "check_df=pd.read_csv('/datasets/credit_scoring_eng.csv')\n",
    "check_df.groupby(['gender','debt'])['total_income'].median()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We filled missing values with gender and debt. Used .loc() to fill in missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "      <th>age_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7036</td>\n",
       "      <td>0</td>\n",
       "      <td>2567.889652</td>\n",
       "      <td>False</td>\n",
       "      <td>secondary education</td>\n",
       "      <td>1</td>\n",
       "      <td>civil partnership</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>civil servant</td>\n",
       "      <td>0</td>\n",
       "      <td>21470.354</td>\n",
       "      <td>wedding ceremony</td>\n",
       "      <td>Not in DataFrame</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      children  days_employed  dob_years            education  education_id  \\\n",
       "7036         0    2567.889652      False  secondary education             1   \n",
       "\n",
       "          family_status  family_status_id gender    income_type  debt  \\\n",
       "7036  civil partnership                 1      F  civil servant     0   \n",
       "\n",
       "      total_income           purpose      age_category  \n",
       "7036     21470.354  wedding ceremony  Not in DataFrame  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[(df['gender']=='F') & (df['debt']==0) & (df['total_income'] ==21470.354)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[If you've came across errors in preparing the values for missing data, it probably means there's something special about the data for the category. Give it some thought - you may want to fix some things manually, if there's enough data to find medians/means.]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21467.9410    815\n",
       "27103.4160    423\n",
       "21248.2895     94\n",
       "25518.8420     63\n",
       "31791.3840      2\n",
       "             ... \n",
       "19232.3340      1\n",
       "32804.1990      1\n",
       "16773.4570      1\n",
       "9762.8240       1\n",
       "9591.8240       1\n",
       "Name: total_income, Length: 19239, dtype: int64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replacing missing values if there are any errors\n",
    "df['total_income'].value_counts()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[When you think you've finished with `total_income`, check that the total number of values in this column matches the number of values in other ones.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19239"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# No errors found\n",
    "df['total_income'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20633, 20633)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of entries in the columns\n",
    "df['education'].count() , df['total_income'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Restoring values in `days_employed`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Think about the parameters that may help you restore the missing values in this column. Eventually, you will want to find out whether you should use mean or median values for replacing missing values. You will probably conduct a research similar to the one you've done when restoring data in a previous column.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Days_employed was converted to absolute values above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "986.927316       1\n",
       "1893.222792      1\n",
       "1741.489608      1\n",
       "5135.928528      1\n",
       "1453.358707      1\n",
       "                ..\n",
       "2348.524271      1\n",
       "2338.480708      1\n",
       "356642.853685    1\n",
       "1218.820922      1\n",
       "582.538413       1\n",
       "Name: days_employed, Length: 19239, dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['days_employed'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1856.789482    1\n",
       "1201.819224    1\n",
       "2611.551298    1\n",
       "1734.469610    1\n",
       "Name: days_employed, dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of `days_employed` medians based on your identified parameters\n",
    "median_days_employed = df.groupby(['gender','debt'])['days_employed'].median().reset_index()\n",
    "\n",
    "median_days_employed['days_employed'].value_counts()\n",
    "#median_days_employed['days_employed'].nunique()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38436.685162    1\n",
       "58517.596432    1\n",
       "84344.551918    1\n",
       "25250.677349    1\n",
       "Name: days_employed, dtype: int64"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of `days_employed` means based on your identified parameters\n",
    "mean_days_employed = df.groupby(['gender','debt'])['days_employed'].mean().reset_index()\n",
    "\n",
    "mean_days_employed['days_employed'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Decide what you will use: means or medians. Explain why.]\n",
    "mean is for normal distributions, median is skewed distributions. The mean is largely influenced by outliers. The median is much more robust and sensible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's write a function that calculates means or medians (depending on your decision) based on your identified parameter\n",
    "def calculate_value(fill_col, fill_value, cat_1, cat_2):\n",
    "    df[fill_col] = df[fill_col].fillna(df.groupby([cat_1 , cat_2])[fill_col].transform(fill_value))\n",
    "    return df[fill_col].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1617.008140      567\n",
       "1577.876626      347\n",
       "365360.781158    200\n",
       "2698.812988      124\n",
       "1204.008348       91\n",
       "                ... \n",
       "1687.038672        1\n",
       "2348.524271        1\n",
       "2338.480708        1\n",
       "356642.853685      1\n",
       "582.538413         1\n",
       "Name: days_employed, Length: 19243, dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check that the function works\n",
    "# Apply function to the income_type\n",
    "\n",
    "calculate_value('days_employed','median','debt', 'income_type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "employee                       10606\n",
       "business                        4924\n",
       "retiree                         3659\n",
       "civil servant                   1438\n",
       "unemployed                         2\n",
       "entrepreneur                       2\n",
       "paternity / maternity leave        1\n",
       "student                            1\n",
       "Name: income_type, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if function worked\n",
    "#The function worked\n",
    "df['income_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replacing missing values\n",
    "\n",
    "df['income_type'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[When you think you've finished with `total_income`, check that the total number of values in this column matches the number of values in other ones.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "children            0\n",
       "days_employed       0\n",
       "dob_years           0\n",
       "education           0\n",
       "education_id        0\n",
       "family_status       0\n",
       "family_status_id    0\n",
       "gender              0\n",
       "income_type         0\n",
       "debt                0\n",
       "total_income        0\n",
       "purpose             0\n",
       "age_category        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the entries in all columns - make sure we fixed all missing values\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Categorization of data\n",
    "\n",
    "[To answer the questions and test the hypotheses, you will want to work with categorized data. Look at the questions that were posed to you and that you should answer. Think about which of the data will need to be categorized to answer these questions. Below you will find a template through which you can work your way when categorizing data. The first step-by-step processing covers the text data; the second one addresses the numerical data that needs to be categorized. You can use both or none of the suggested instructions - it's up to you.]\n",
    "\n",
    "[Despite of how you decide to address the categorization, make sure to provide clear explanation of why you made your decision. Remember: this is your work and you make all decisions in it.]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "children\n",
      "[1 0 3 2 4 5]\n",
      "----------------------------------------\n",
      "days_employed\n",
      "[8437.67302776 4024.80375385 5623.42261023 ... 2113.3468877  3112.4817052\n",
      " 1984.50758853]\n",
      "----------------------------------------\n",
      "dob_years\n",
      "[False]\n",
      "----------------------------------------\n",
      "education\n",
      "[\"bachelor's degree\" 'secondary education' 'some college'\n",
      " 'primary education' 'graduate degree']\n",
      "----------------------------------------\n",
      "education_id\n",
      "[0 1 2 3 4]\n",
      "----------------------------------------\n",
      "family_status\n",
      "['married' 'civil partnership' 'widow / widower' 'divorced' 'unmarried']\n",
      "----------------------------------------\n",
      "family_status_id\n",
      "[0 1 2 3 4]\n",
      "----------------------------------------\n",
      "gender\n",
      "['F' 'M']\n",
      "----------------------------------------\n",
      "income_type\n",
      "['employee' 'retiree' 'business' 'civil servant' 'unemployed'\n",
      " 'entrepreneur' 'student' 'paternity / maternity leave']\n",
      "----------------------------------------\n",
      "debt\n",
      "[0 1]\n",
      "----------------------------------------\n",
      "total_income\n",
      "[40620.102 17932.802 23341.752 ... 14347.61  39054.888 13127.587]\n",
      "----------------------------------------\n",
      "purpose\n",
      "['purchase of the house' 'car purchase' 'supplementary education'\n",
      " 'to have a wedding' 'housing transactions' 'education' 'having a wedding'\n",
      " 'purchase of the house for my family' 'buy real estate'\n",
      " 'buy commercial real estate' 'buy residential real estate'\n",
      " 'construction of own property' 'property' 'building a property'\n",
      " 'buying a second-hand car' 'buying my own car'\n",
      " 'transactions with commercial real estate' 'building a real estate'\n",
      " 'housing' 'transactions with my real estate' 'cars' 'to become educated'\n",
      " 'second-hand car purchase' 'getting an education' 'car'\n",
      " 'wedding ceremony' 'to get a supplementary education'\n",
      " 'purchase of my own house' 'real estate transactions'\n",
      " 'getting higher education' 'to own a car' 'purchase of a car'\n",
      " 'profile education' 'university education'\n",
      " 'buying property for renting out' 'to buy a car' 'housing renovation'\n",
      " 'going to university']\n",
      "----------------------------------------\n",
      "age_category\n",
      "['Not in DataFrame']\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Print the values for your selected data for categorization\n",
    "# Check the unique values\n",
    "for value_counts in df.columns:\n",
    "    print(value_counts)\n",
    "    print(df[value_counts].unique())  \n",
    "    print('-'*40)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Let's check unique values]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[What main groups can you identify based on the unique values?]\n",
    "\n",
    "[Based on these themes, we will probably want to categorize our data.]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's write a function to categorize the data based on common topics\n",
    "def eligibility(debt,gender):\n",
    "    if debt == 1 and gender == 'M':\n",
    "        return 'Not Elligable'\n",
    "    elif debt == 0 and gender == 'M':\n",
    "        return 'Elligable'\n",
    "    elif debt == 1 and gender == 'F':\n",
    "        return 'Pending'\n",
    "    else:\n",
    "        return 'Pending'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a column with the categories and count the values for them\n",
    "\n",
    "\n",
    "#df['elligability'] = df[['debt' & 'gender']].apply(lambda x: gender_debt(x))\n",
    "\n",
    "df_eligibility = df.groupby(['age_category', 'income_type']) \\\n",
    "    .agg(persons=('debt', 'count'), \n",
    "         in_group_debt_rate=('debt', 'mean'),\n",
    "         population_debt_rate=('debt', 'sum'\n",
    "                              \n",
    "                              ))\n",
    "#lambda x:\n",
    "#sum(x)/len(df)\n",
    "#df['debt'] = df['gender'].apply(eligibility)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[If you decide to categorize the numerical data, you'll need to come up with the categories for it too.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "persons \n",
      "\n",
      "[ 4924  1438 10606     2     1  3659]\n",
      "----------------------------------------\n",
      "in_group_debt_rate \n",
      "\n",
      "[0.07575142 0.05980529 0.09871771 0.         1.         0.05766603\n",
      " 0.5       ]\n",
      "----------------------------------------\n",
      "population_debt_rate \n",
      "\n",
      "[ 373   86 1047    0    1  211]\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Looking through all the numerical data in your selected column for categorization\n",
    "for value_counts in df_eligibility.columns:\n",
    "    print(value_counts, '\\n' )\n",
    "    print(df_eligibility[value_counts].unique())  \n",
    "    print('-'*40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>persons</th>\n",
       "      <th>in_group_debt_rate</th>\n",
       "      <th>population_debt_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>2579.125000</td>\n",
       "      <td>0.223993</td>\n",
       "      <td>214.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>3760.206318</td>\n",
       "      <td>0.352745</td>\n",
       "      <td>362.114204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>0.043250</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>720.000000</td>\n",
       "      <td>0.067778</td>\n",
       "      <td>43.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>3975.250000</td>\n",
       "      <td>0.199038</td>\n",
       "      <td>251.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>10606.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1047.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            persons  in_group_debt_rate  population_debt_rate\n",
       "count      8.000000            8.000000              8.000000\n",
       "mean    2579.125000            0.223993            214.875000\n",
       "std     3760.206318            0.352745            362.114204\n",
       "min        1.000000            0.000000              0.000000\n",
       "25%        1.750000            0.043250              0.750000\n",
       "50%      720.000000            0.067778             43.500000\n",
       "75%     3975.250000            0.199038            251.500000\n",
       "max    10606.000000            1.000000           1047.000000"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting summary statistics for the column\n",
    "df_eligibility.describe()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Decide what ranges you will use for grouping and explain why.] I used these ranges based on .describe() method I used on days employed. This was done to acheive proper distribution over the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating function for categorizing into different numerical groups based on ranges\n",
    "#def ranges (debt,gender): \n",
    "    #if 1 == debt & 'F' == gender:\n",
    "        #return \"Female and On Time\"\n",
    "    #if 1 == debt & 'M' == gender:\n",
    "        #return \"Male and On Time\"\n",
    "    #if 0 == debt & 'F' == gender:\n",
    "        #return \"Female with Debt\"\n",
    "    #if 0 == debt & 'M' == gender:\n",
    "        #return \"Male with Debt\"\n",
    "        #else\n",
    "            #return \"Not in our DataFrame\"\n",
    "            \n",
    "def ranges(row):\n",
    "    days_employed = row['days_employed']\n",
    "    total_income = row['total_income']\n",
    "    if days_employed >= 2747 & total_income >= 16488:\n",
    "        return '25 percentile'\n",
    "    if days_employed >= 1203 & total_income >= 23202:\n",
    "        return '50 percentile'\n",
    "    if days_employed >= 291 & total_income >= 32549:\n",
    "        return '75 percentile'\n",
    "    else:\n",
    "        return 'Outlier'\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     20633.000000\n",
       "mean      66667.200987\n",
       "std      138857.826381\n",
       "min          24.141633\n",
       "25%         994.321333\n",
       "50%        2060.164064\n",
       "75%        5367.877964\n",
       "max      401755.400475\n",
       "Name: days_employed, dtype: float64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['days_employed'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     20633.000000\n",
       "mean      26558.736237\n",
       "std       15968.093364\n",
       "min        3306.762000\n",
       "25%       16944.193000\n",
       "50%       22912.349000\n",
       "75%       31713.445000\n",
       "max      362496.645000\n",
       "Name: total_income, dtype: float64"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['total_income'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking the Hypotheses\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Is there a correlation between having children and paying back on time?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the children data and paying back on time\n",
    "dataframe_children=df[['children','debt']]\n",
    "dataframe_children.head()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# def payback_rate(debt,children): \n",
    "#     if debt==1 and children >0:\n",
    "#         return \"Debt with Kids\"\n",
    "#     elif debt==1 and children ==0:\n",
    "#         return \"Debt no Kids\"\n",
    "#     elif debt==0 and children >0:\n",
    "#         return \"No Debt with Kids\"\n",
    "#     elif debt==0 and children <0:\n",
    "#         return \"No Debt no Kids\"\n",
    "#     else:\n",
    "#         return \"Not in our DataFrame\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "df_eligibility = df.groupby(['age_category', 'income_type']) \\\n",
    "    .agg(persons=('debt', 'count'), \n",
    "         in_group_debt_rate=('debt', 'mean'),\n",
    "         population_debt_rate=('debt', 'sum'\n",
    "                              \n",
    "                              ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>persons</th>\n",
       "      <th>debt_ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>children</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1051</td>\n",
       "      <td>0.077565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>443</td>\n",
       "      <td>0.094456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>194</td>\n",
       "      <td>0.096326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>27</td>\n",
       "      <td>0.082067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0.097561</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          persons  debt_ratio\n",
       "children                     \n",
       "0            1051    0.077565\n",
       "1             443    0.094456\n",
       "2             194    0.096326\n",
       "3              27    0.082067\n",
       "4               4    0.097561"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating default-rate based on the number of children\n",
    "df_child_ratio = df.groupby(['children'])\\\n",
    "    .agg(persons=('debt', 'sum'), \n",
    "         debt_ratio=('debt', 'mean'))\n",
    "df_child_ratio.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion**\n",
    "\n",
    "[Write your conclusions based on your manipulations and observations.] I observe a correlation between children and debt. The debt ratio is the lowest with no kids,and the highest with 4 kids. The debt ratio for three kids stands out because its lower than 1 or 2 kids.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Is there a correlation between family status and paying back on time?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>persons</th>\n",
       "      <th>debt_ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>family_status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>civil partnership</td>\n",
       "      <td>378</td>\n",
       "      <td>0.094808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>divorced</td>\n",
       "      <td>84</td>\n",
       "      <td>0.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>married</td>\n",
       "      <td>921</td>\n",
       "      <td>0.078110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unmarried</td>\n",
       "      <td>273</td>\n",
       "      <td>0.099381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>widow / widower</td>\n",
       "      <td>63</td>\n",
       "      <td>0.067597</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   persons  debt_ratio\n",
       "family_status                         \n",
       "civil partnership      378    0.094808\n",
       "divorced                84    0.071429\n",
       "married                921    0.078110\n",
       "unmarried              273    0.099381\n",
       "widow / widower         63    0.067597"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the family status data and paying back on time\n",
    "\n",
    "df.groupby(['family_status'])\\\n",
    "    .agg(persons=('debt', 'sum'), \n",
    "         debt_ratio=('debt', 'mean'))\n",
    "\n",
    "# Calculating default-rate based on family status\n",
    "#df['family_status']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion**\n",
    "\n",
    "[Write your conclusions based on your manipulations and observations.] The debt ratio is highest when unmarried, and lowest as widow/widower. Divorced and married people have similar debt ratio. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Is there a correlation between income level and paying back on time?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>persons</th>\n",
       "      <th>debt_ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>income_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>business</td>\n",
       "      <td>373</td>\n",
       "      <td>0.075751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>civil servant</td>\n",
       "      <td>86</td>\n",
       "      <td>0.059805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>employee</td>\n",
       "      <td>1047</td>\n",
       "      <td>0.098718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>paternity / maternity leave</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>retiree</td>\n",
       "      <td>211</td>\n",
       "      <td>0.057666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>student</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unemployed</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             persons  debt_ratio\n",
       "income_type                                     \n",
       "business                         373    0.075751\n",
       "civil servant                     86    0.059805\n",
       "employee                        1047    0.098718\n",
       "entrepreneur                       0    0.000000\n",
       "paternity / maternity leave        1    1.000000\n",
       "retiree                          211    0.057666\n",
       "student                            0    0.000000\n",
       "unemployed                         1    0.500000"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the income level data and paying back on time\n",
    "\n",
    "df.groupby(['income_type'])\\\n",
    "    .agg(persons=('debt', 'sum'), \n",
    "         debt_ratio=('debt', 'mean'))\n",
    "\n",
    "\n",
    "# Calculating default-rate based on income level\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion**\n",
    "\n",
    "[Write your conclusions based on your manipulations and observations.]\n",
    "I did not observe  a correlation between income type and debt ratio."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**How does credit purpose affect the default rate?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>persons</th>\n",
       "      <th>debt_ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>purpose</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>building a property</td>\n",
       "      <td>54</td>\n",
       "      <td>0.090000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>building a real estate</td>\n",
       "      <td>48</td>\n",
       "      <td>0.079470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buy commercial real estate</td>\n",
       "      <td>46</td>\n",
       "      <td>0.072214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buy real estate</td>\n",
       "      <td>43</td>\n",
       "      <td>0.073129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buy residential real estate</td>\n",
       "      <td>41</td>\n",
       "      <td>0.071057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buying a second-hand car</td>\n",
       "      <td>35</td>\n",
       "      <td>0.076253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buying my own car</td>\n",
       "      <td>46</td>\n",
       "      <td>0.094845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>buying property for renting out</td>\n",
       "      <td>51</td>\n",
       "      <td>0.081731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>car</td>\n",
       "      <td>41</td>\n",
       "      <td>0.085062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>car purchase</td>\n",
       "      <td>42</td>\n",
       "      <td>0.093750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>cars</td>\n",
       "      <td>43</td>\n",
       "      <td>0.093478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>construction of own property</td>\n",
       "      <td>41</td>\n",
       "      <td>0.067993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>education</td>\n",
       "      <td>32</td>\n",
       "      <td>0.074074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>getting an education</td>\n",
       "      <td>35</td>\n",
       "      <td>0.081776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>getting higher education</td>\n",
       "      <td>46</td>\n",
       "      <td>0.109524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>going to university</td>\n",
       "      <td>42</td>\n",
       "      <td>0.087683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>having a wedding</td>\n",
       "      <td>56</td>\n",
       "      <td>0.078322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>housing</td>\n",
       "      <td>46</td>\n",
       "      <td>0.074194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>housing renovation</td>\n",
       "      <td>35</td>\n",
       "      <td>0.059727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>housing transactions</td>\n",
       "      <td>48</td>\n",
       "      <td>0.076677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>profile education</td>\n",
       "      <td>44</td>\n",
       "      <td>0.103774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>property</td>\n",
       "      <td>42</td>\n",
       "      <td>0.069307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>purchase of a car</td>\n",
       "      <td>50</td>\n",
       "      <td>0.113122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>purchase of my own house</td>\n",
       "      <td>34</td>\n",
       "      <td>0.056198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>purchase of the house</td>\n",
       "      <td>48</td>\n",
       "      <td>0.076677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>purchase of the house for my family</td>\n",
       "      <td>45</td>\n",
       "      <td>0.073052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>real estate transactions</td>\n",
       "      <td>54</td>\n",
       "      <td>0.082443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>second-hand car purchase</td>\n",
       "      <td>50</td>\n",
       "      <td>0.108460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>supplementary education</td>\n",
       "      <td>38</td>\n",
       "      <td>0.085973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>to become educated</td>\n",
       "      <td>39</td>\n",
       "      <td>0.099744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>to buy a car</td>\n",
       "      <td>44</td>\n",
       "      <td>0.095445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>to get a supplementary education</td>\n",
       "      <td>51</td>\n",
       "      <td>0.118056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>to have a wedding</td>\n",
       "      <td>57</td>\n",
       "      <td>0.079498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>to own a car</td>\n",
       "      <td>47</td>\n",
       "      <td>0.101293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>transactions with commercial real estate</td>\n",
       "      <td>52</td>\n",
       "      <td>0.082803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>transactions with my real estate</td>\n",
       "      <td>50</td>\n",
       "      <td>0.083612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>university education</td>\n",
       "      <td>40</td>\n",
       "      <td>0.091324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>wedding ceremony</td>\n",
       "      <td>63</td>\n",
       "      <td>0.083554</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          persons  debt_ratio\n",
       "purpose                                                      \n",
       "building a property                            54    0.090000\n",
       "building a real estate                         48    0.079470\n",
       "buy commercial real estate                     46    0.072214\n",
       "buy real estate                                43    0.073129\n",
       "buy residential real estate                    41    0.071057\n",
       "buying a second-hand car                       35    0.076253\n",
       "buying my own car                              46    0.094845\n",
       "buying property for renting out                51    0.081731\n",
       "car                                            41    0.085062\n",
       "car purchase                                   42    0.093750\n",
       "cars                                           43    0.093478\n",
       "construction of own property                   41    0.067993\n",
       "education                                      32    0.074074\n",
       "getting an education                           35    0.081776\n",
       "getting higher education                       46    0.109524\n",
       "going to university                            42    0.087683\n",
       "having a wedding                               56    0.078322\n",
       "housing                                        46    0.074194\n",
       "housing renovation                             35    0.059727\n",
       "housing transactions                           48    0.076677\n",
       "profile education                              44    0.103774\n",
       "property                                       42    0.069307\n",
       "purchase of a car                              50    0.113122\n",
       "purchase of my own house                       34    0.056198\n",
       "purchase of the house                          48    0.076677\n",
       "purchase of the house for my family            45    0.073052\n",
       "real estate transactions                       54    0.082443\n",
       "second-hand car purchase                       50    0.108460\n",
       "supplementary education                        38    0.085973\n",
       "to become educated                             39    0.099744\n",
       "to buy a car                                   44    0.095445\n",
       "to get a supplementary education               51    0.118056\n",
       "to have a wedding                              57    0.079498\n",
       "to own a car                                   47    0.101293\n",
       "transactions with commercial real estate       52    0.082803\n",
       "transactions with my real estate               50    0.083612\n",
       "university education                           40    0.091324\n",
       "wedding ceremony                               63    0.083554"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the percentages for default rate for each credit purpose and analyze them\n",
    "\n",
    "df.groupby(['purpose'])\\\n",
    "    .agg(persons=('debt', 'sum'), \n",
    "         debt_ratio=('debt', 'mean'))"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 2741,
    "start_time": "2021-10-21T01:08:49.480Z"
   },
   {
    "duration": 52,
    "start_time": "2021-10-21T01:08:53.315Z"
   },
   {
    "duration": 49,
    "start_time": "2021-10-21T01:08:57.432Z"
   },
   {
    "duration": 70,
    "start_time": "2021-10-21T01:09:07.706Z"
   },
   {
    "duration": 751,
    "start_time": "2022-02-26T18:42:14.916Z"
   },
   {
    "duration": 67,
    "start_time": "2022-02-26T18:45:04.773Z"
   },
   {
    "duration": 11,
    "start_time": "2022-02-26T18:45:15.246Z"
   },
   {
    "duration": 298,
    "start_time": "2022-02-26T18:47:57.565Z"
   },
   {
    "duration": 12,
    "start_time": "2022-02-26T18:48:11.853Z"
   },
   {
    "duration": 13,
    "start_time": "2022-02-26T18:48:59.966Z"
   },
   {
    "duration": 62,
    "start_time": "2022-02-26T18:49:19.753Z"
   },
   {
    "duration": 48,
    "start_time": "2022-02-26T18:50:25.659Z"
   },
   {
    "duration": 61,
    "start_time": "2022-02-26T18:50:35.097Z"
   },
   {
    "duration": -482,
    "start_time": "2022-02-26T18:52:57.470Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-26T18:53:17.869Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-26T19:07:34.912Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-26T19:08:12.881Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-26T19:09:21.215Z"
   },
   {
    "duration": 215,
    "start_time": "2022-02-26T19:13:50.375Z"
   },
   {
    "duration": 10,
    "start_time": "2022-02-26T19:14:14.395Z"
   },
   {
    "duration": 9,
    "start_time": "2022-02-26T23:34:06.663Z"
   },
   {
    "duration": 619,
    "start_time": "2022-02-26T23:37:49.903Z"
   },
   {
    "duration": 19,
    "start_time": "2022-02-26T23:38:13.414Z"
   },
   {
    "duration": 10,
    "start_time": "2022-02-26T23:38:31.612Z"
   },
   {
    "duration": 16,
    "start_time": "2022-02-26T23:42:33.668Z"
   },
   {
    "duration": 222,
    "start_time": "2022-02-26T23:43:15.579Z"
   },
   {
    "duration": 93,
    "start_time": "2022-02-26T23:44:17.399Z"
   },
   {
    "duration": 220,
    "start_time": "2022-02-26T23:44:27.478Z"
   },
   {
    "duration": 220,
    "start_time": "2022-02-26T23:45:19.229Z"
   },
   {
    "duration": 14,
    "start_time": "2022-02-26T23:45:39.660Z"
   },
   {
    "duration": 89,
    "start_time": "2022-02-26T23:47:38.927Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-26T23:47:44.501Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-26T23:48:42.784Z"
   },
   {
    "duration": 242,
    "start_time": "2022-02-26T23:50:43.527Z"
   },
   {
    "duration": 225,
    "start_time": "2022-02-26T23:50:59.447Z"
   },
   {
    "duration": 7,
    "start_time": "2022-02-26T23:51:14.286Z"
   },
   {
    "duration": 12,
    "start_time": "2022-02-27T00:00:44.881Z"
   },
   {
    "duration": 85,
    "start_time": "2022-02-27T00:01:05.246Z"
   },
   {
    "duration": 101,
    "start_time": "2022-02-27T00:01:16.291Z"
   },
   {
    "duration": 74,
    "start_time": "2022-02-27T00:03:26.027Z"
   },
   {
    "duration": 106,
    "start_time": "2022-02-27T00:05:53.473Z"
   },
   {
    "duration": 77,
    "start_time": "2022-02-27T00:06:07.836Z"
   },
   {
    "duration": 81,
    "start_time": "2022-02-27T00:06:38.427Z"
   },
   {
    "duration": 70,
    "start_time": "2022-02-27T00:06:46.974Z"
   },
   {
    "duration": 7,
    "start_time": "2022-02-27T00:07:14.439Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-27T00:07:36.414Z"
   },
   {
    "duration": 375,
    "start_time": "2022-02-27T22:21:04.338Z"
   },
   {
    "duration": 278,
    "start_time": "2022-02-27T22:25:16.892Z"
   },
   {
    "duration": 99,
    "start_time": "2022-02-27T22:28:30.959Z"
   },
   {
    "duration": 296,
    "start_time": "2022-02-27T22:28:42.881Z"
   },
   {
    "duration": 274,
    "start_time": "2022-02-27T22:28:59.609Z"
   },
   {
    "duration": 990,
    "start_time": "2022-02-27T22:30:15.081Z"
   },
   {
    "duration": 348,
    "start_time": "2022-02-27T22:30:30.624Z"
   },
   {
    "duration": 284,
    "start_time": "2022-02-27T22:30:37.822Z"
   },
   {
    "duration": 319,
    "start_time": "2022-02-27T22:30:41.959Z"
   },
   {
    "duration": 326,
    "start_time": "2022-02-27T22:30:46.808Z"
   },
   {
    "duration": 69,
    "start_time": "2022-02-27T22:33:15.336Z"
   },
   {
    "duration": 86,
    "start_time": "2022-02-27T22:34:40.464Z"
   },
   {
    "duration": 3389,
    "start_time": "2022-02-27T22:35:03.795Z"
   },
   {
    "duration": 89,
    "start_time": "2022-02-27T22:37:23.577Z"
   },
   {
    "duration": 104,
    "start_time": "2022-02-27T22:37:48.405Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-27T22:38:57.672Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-27T22:41:35.632Z"
   },
   {
    "duration": 93,
    "start_time": "2022-02-27T22:42:48.400Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-27T22:43:01.968Z"
   },
   {
    "duration": 8,
    "start_time": "2022-02-27T22:45:35.679Z"
   },
   {
    "duration": 365,
    "start_time": "2022-02-27T22:52:41.755Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-27T23:07:10.525Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-27T23:07:23.362Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-27T23:07:43.433Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-27T23:08:20.809Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-27T23:08:25.159Z"
   },
   {
    "duration": 272,
    "start_time": "2022-02-27T23:19:59.502Z"
   },
   {
    "duration": 278,
    "start_time": "2022-02-27T23:20:40.686Z"
   },
   {
    "duration": 378,
    "start_time": "2022-02-28T17:52:07.445Z"
   },
   {
    "duration": 610,
    "start_time": "2022-02-28T17:52:39.788Z"
   },
   {
    "duration": 43,
    "start_time": "2022-02-28T17:54:38.279Z"
   },
   {
    "duration": 44,
    "start_time": "2022-02-28T17:59:47.775Z"
   },
   {
    "duration": 54,
    "start_time": "2022-02-28T18:09:06.488Z"
   },
   {
    "duration": 395,
    "start_time": "2022-02-28T18:12:01.108Z"
   },
   {
    "duration": 312,
    "start_time": "2022-02-28T18:12:08.714Z"
   },
   {
    "duration": 345,
    "start_time": "2022-02-28T18:12:20.673Z"
   },
   {
    "duration": 294,
    "start_time": "2022-02-28T18:12:53.522Z"
   },
   {
    "duration": 41,
    "start_time": "2022-02-28T18:13:15.654Z"
   },
   {
    "duration": 5,
    "start_time": "2022-02-28T18:13:23.955Z"
   },
   {
    "duration": 4,
    "start_time": "2022-02-28T18:13:55.826Z"
   },
   {
    "duration": 40,
    "start_time": "2022-02-28T18:14:31.678Z"
   },
   {
    "duration": 39,
    "start_time": "2022-02-28T18:14:37.485Z"
   },
   {
    "duration": 4,
    "start_time": "2022-02-28T18:14:40.559Z"
   },
   {
    "duration": 424,
    "start_time": "2022-02-28T18:19:05.994Z"
   },
   {
    "duration": 19,
    "start_time": "2022-02-28T18:22:44.340Z"
   },
   {
    "duration": 279,
    "start_time": "2022-02-28T21:12:51.815Z"
   },
   {
    "duration": 784,
    "start_time": "2022-02-28T21:13:23.303Z"
   },
   {
    "duration": 270,
    "start_time": "2022-02-28T22:20:16.735Z"
   },
   {
    "duration": 3,
    "start_time": "2022-02-28T22:20:22.883Z"
   },
   {
    "duration": 4,
    "start_time": "2022-02-28T22:20:26.442Z"
   },
   {
    "duration": 4,
    "start_time": "2022-02-28T22:20:37.692Z"
   },
   {
    "duration": 6,
    "start_time": "2022-02-28T22:20:39.866Z"
   },
   {
    "duration": 80,
    "start_time": "2022-03-01T17:36:14.756Z"
   },
   {
    "duration": 70,
    "start_time": "2022-03-01T17:37:11.826Z"
   },
   {
    "duration": 68,
    "start_time": "2022-03-01T17:37:24.885Z"
   },
   {
    "duration": 312,
    "start_time": "2022-03-01T17:41:13.623Z"
   },
   {
    "duration": 207,
    "start_time": "2022-03-01T17:41:31.976Z"
   },
   {
    "duration": 6384,
    "start_time": "2022-03-01T17:43:03.072Z"
   },
   {
    "duration": 758,
    "start_time": "2022-03-01T17:48:44.329Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-01T17:48:45.091Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-01T17:48:45.107Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-01T17:48:45.128Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T17:48:45.147Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-01T17:48:45.187Z"
   },
   {
    "duration": 91,
    "start_time": "2022-03-01T17:48:45.204Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-01T17:48:45.299Z"
   },
   {
    "duration": 367,
    "start_time": "2022-03-01T17:48:45.317Z"
   },
   {
    "duration": 3289,
    "start_time": "2022-03-01T17:48:42.399Z"
   },
   {
    "duration": 3284,
    "start_time": "2022-03-01T17:48:42.406Z"
   },
   {
    "duration": 3282,
    "start_time": "2022-03-01T17:48:42.409Z"
   },
   {
    "duration": 3279,
    "start_time": "2022-03-01T17:48:42.414Z"
   },
   {
    "duration": 3270,
    "start_time": "2022-03-01T17:48:42.424Z"
   },
   {
    "duration": 3267,
    "start_time": "2022-03-01T17:48:42.428Z"
   },
   {
    "duration": 3265,
    "start_time": "2022-03-01T17:48:42.432Z"
   },
   {
    "duration": 3263,
    "start_time": "2022-03-01T17:48:42.435Z"
   },
   {
    "duration": 3260,
    "start_time": "2022-03-01T17:48:42.439Z"
   },
   {
    "duration": 3259,
    "start_time": "2022-03-01T17:48:42.442Z"
   },
   {
    "duration": 3257,
    "start_time": "2022-03-01T17:48:42.446Z"
   },
   {
    "duration": 3255,
    "start_time": "2022-03-01T17:48:42.449Z"
   },
   {
    "duration": 3253,
    "start_time": "2022-03-01T17:48:42.453Z"
   },
   {
    "duration": 3251,
    "start_time": "2022-03-01T17:48:42.456Z"
   },
   {
    "duration": 3250,
    "start_time": "2022-03-01T17:48:42.459Z"
   },
   {
    "duration": 3242,
    "start_time": "2022-03-01T17:48:42.468Z"
   },
   {
    "duration": 3240,
    "start_time": "2022-03-01T17:48:42.471Z"
   },
   {
    "duration": 3239,
    "start_time": "2022-03-01T17:48:42.474Z"
   },
   {
    "duration": 3018,
    "start_time": "2022-03-01T17:48:42.696Z"
   },
   {
    "duration": 2991,
    "start_time": "2022-03-01T17:48:42.725Z"
   },
   {
    "duration": 2988,
    "start_time": "2022-03-01T17:48:42.729Z"
   },
   {
    "duration": 2987,
    "start_time": "2022-03-01T17:48:42.732Z"
   },
   {
    "duration": 2984,
    "start_time": "2022-03-01T17:48:42.736Z"
   },
   {
    "duration": 2982,
    "start_time": "2022-03-01T17:48:42.740Z"
   },
   {
    "duration": 2980,
    "start_time": "2022-03-01T17:48:42.743Z"
   },
   {
    "duration": 2979,
    "start_time": "2022-03-01T17:48:42.746Z"
   },
   {
    "duration": 2977,
    "start_time": "2022-03-01T17:48:42.750Z"
   },
   {
    "duration": 3034,
    "start_time": "2022-03-01T17:48:42.753Z"
   },
   {
    "duration": 3032,
    "start_time": "2022-03-01T17:48:42.757Z"
   },
   {
    "duration": 3031,
    "start_time": "2022-03-01T17:48:42.760Z"
   },
   {
    "duration": 3028,
    "start_time": "2022-03-01T17:48:42.764Z"
   },
   {
    "duration": 3027,
    "start_time": "2022-03-01T17:48:42.767Z"
   },
   {
    "duration": 3025,
    "start_time": "2022-03-01T17:48:42.771Z"
   },
   {
    "duration": 3023,
    "start_time": "2022-03-01T17:48:42.774Z"
   },
   {
    "duration": 3022,
    "start_time": "2022-03-01T17:48:42.777Z"
   },
   {
    "duration": 3021,
    "start_time": "2022-03-01T17:48:42.780Z"
   },
   {
    "duration": 3020,
    "start_time": "2022-03-01T17:48:42.783Z"
   },
   {
    "duration": 3021,
    "start_time": "2022-03-01T17:48:42.787Z"
   },
   {
    "duration": 3020,
    "start_time": "2022-03-01T17:48:42.790Z"
   },
   {
    "duration": 3019,
    "start_time": "2022-03-01T17:48:42.793Z"
   },
   {
    "duration": 3017,
    "start_time": "2022-03-01T17:48:42.796Z"
   },
   {
    "duration": 3015,
    "start_time": "2022-03-01T17:48:42.799Z"
   },
   {
    "duration": 3012,
    "start_time": "2022-03-01T17:48:42.803Z"
   },
   {
    "duration": 3010,
    "start_time": "2022-03-01T17:48:42.806Z"
   },
   {
    "duration": 3009,
    "start_time": "2022-03-01T17:48:42.809Z"
   },
   {
    "duration": 3007,
    "start_time": "2022-03-01T17:48:42.812Z"
   },
   {
    "duration": 3005,
    "start_time": "2022-03-01T17:48:42.815Z"
   },
   {
    "duration": 3003,
    "start_time": "2022-03-01T17:48:42.818Z"
   },
   {
    "duration": 3065,
    "start_time": "2022-03-01T17:48:42.822Z"
   },
   {
    "duration": 3057,
    "start_time": "2022-03-01T17:48:42.832Z"
   },
   {
    "duration": 3054,
    "start_time": "2022-03-01T17:48:42.836Z"
   },
   {
    "duration": 3052,
    "start_time": "2022-03-01T17:48:42.840Z"
   },
   {
    "duration": 3051,
    "start_time": "2022-03-01T17:48:42.843Z"
   },
   {
    "duration": 3050,
    "start_time": "2022-03-01T17:48:42.846Z"
   },
   {
    "duration": 3047,
    "start_time": "2022-03-01T17:48:42.850Z"
   },
   {
    "duration": 3046,
    "start_time": "2022-03-01T17:48:42.853Z"
   },
   {
    "duration": 3045,
    "start_time": "2022-03-01T17:48:42.856Z"
   },
   {
    "duration": 3043,
    "start_time": "2022-03-01T17:48:42.859Z"
   },
   {
    "duration": 3041,
    "start_time": "2022-03-01T17:48:42.863Z"
   },
   {
    "duration": 3039,
    "start_time": "2022-03-01T17:48:42.866Z"
   },
   {
    "duration": 3038,
    "start_time": "2022-03-01T17:48:42.869Z"
   },
   {
    "duration": 3003,
    "start_time": "2022-03-01T17:48:42.905Z"
   },
   {
    "duration": 5562,
    "start_time": "2022-03-01T17:48:55.638Z"
   },
   {
    "duration": 89,
    "start_time": "2022-03-01T17:50:25.248Z"
   },
   {
    "duration": 5543,
    "start_time": "2022-03-01T17:50:32.489Z"
   },
   {
    "duration": 5601,
    "start_time": "2022-03-01T17:50:44.020Z"
   },
   {
    "duration": 8196,
    "start_time": "2022-03-01T17:51:23.424Z"
   },
   {
    "duration": 5697,
    "start_time": "2022-03-01T17:55:29.046Z"
   },
   {
    "duration": 5157,
    "start_time": "2022-03-01T17:55:40.109Z"
   },
   {
    "duration": 5250,
    "start_time": "2022-03-01T17:55:56.306Z"
   },
   {
    "duration": 5493,
    "start_time": "2022-03-01T17:56:37.935Z"
   },
   {
    "duration": 5220,
    "start_time": "2022-03-01T17:56:45.270Z"
   },
   {
    "duration": 5475,
    "start_time": "2022-03-01T17:57:04.157Z"
   },
   {
    "duration": 907,
    "start_time": "2022-03-01T17:57:27.470Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T17:57:28.380Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-01T17:57:28.396Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-01T17:57:28.417Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T17:57:28.443Z"
   },
   {
    "duration": 38,
    "start_time": "2022-03-01T17:57:28.450Z"
   },
   {
    "duration": 96,
    "start_time": "2022-03-01T17:57:28.491Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-01T17:57:28.590Z"
   },
   {
    "duration": 669,
    "start_time": "2022-03-01T17:57:28.613Z"
   },
   {
    "duration": 2131,
    "start_time": "2022-03-01T17:57:27.156Z"
   },
   {
    "duration": 1920,
    "start_time": "2022-03-01T17:57:27.369Z"
   },
   {
    "duration": 1916,
    "start_time": "2022-03-01T17:57:27.374Z"
   },
   {
    "duration": 1913,
    "start_time": "2022-03-01T17:57:27.379Z"
   },
   {
    "duration": 1911,
    "start_time": "2022-03-01T17:57:27.383Z"
   },
   {
    "duration": 1909,
    "start_time": "2022-03-01T17:57:27.386Z"
   },
   {
    "duration": 1907,
    "start_time": "2022-03-01T17:57:27.390Z"
   },
   {
    "duration": 1902,
    "start_time": "2022-03-01T17:57:27.396Z"
   },
   {
    "duration": 1898,
    "start_time": "2022-03-01T17:57:27.401Z"
   },
   {
    "duration": 1896,
    "start_time": "2022-03-01T17:57:27.405Z"
   },
   {
    "duration": 1892,
    "start_time": "2022-03-01T17:57:27.410Z"
   },
   {
    "duration": 1889,
    "start_time": "2022-03-01T17:57:27.414Z"
   },
   {
    "duration": 1886,
    "start_time": "2022-03-01T17:57:27.419Z"
   },
   {
    "duration": 1883,
    "start_time": "2022-03-01T17:57:27.423Z"
   },
   {
    "duration": 1878,
    "start_time": "2022-03-01T17:57:27.429Z"
   },
   {
    "duration": 1876,
    "start_time": "2022-03-01T17:57:27.433Z"
   },
   {
    "duration": 1873,
    "start_time": "2022-03-01T17:57:27.437Z"
   },
   {
    "duration": 1870,
    "start_time": "2022-03-01T17:57:27.441Z"
   },
   {
    "duration": 1867,
    "start_time": "2022-03-01T17:57:27.446Z"
   },
   {
    "duration": 1849,
    "start_time": "2022-03-01T17:57:27.465Z"
   },
   {
    "duration": 1833,
    "start_time": "2022-03-01T17:57:27.482Z"
   },
   {
    "duration": 1822,
    "start_time": "2022-03-01T17:57:27.495Z"
   },
   {
    "duration": 1818,
    "start_time": "2022-03-01T17:57:27.501Z"
   },
   {
    "duration": 1806,
    "start_time": "2022-03-01T17:57:27.514Z"
   },
   {
    "duration": 1385,
    "start_time": "2022-03-01T17:57:27.937Z"
   },
   {
    "duration": 1264,
    "start_time": "2022-03-01T17:57:28.060Z"
   },
   {
    "duration": 1259,
    "start_time": "2022-03-01T17:57:28.066Z"
   },
   {
    "duration": 1247,
    "start_time": "2022-03-01T17:57:28.079Z"
   },
   {
    "duration": 1239,
    "start_time": "2022-03-01T17:57:28.089Z"
   },
   {
    "duration": 1237,
    "start_time": "2022-03-01T17:57:28.092Z"
   },
   {
    "duration": 1233,
    "start_time": "2022-03-01T17:57:28.097Z"
   },
   {
    "duration": 1224,
    "start_time": "2022-03-01T17:57:28.107Z"
   },
   {
    "duration": 1219,
    "start_time": "2022-03-01T17:57:28.113Z"
   },
   {
    "duration": 1211,
    "start_time": "2022-03-01T17:57:28.123Z"
   },
   {
    "duration": 1207,
    "start_time": "2022-03-01T17:57:28.128Z"
   },
   {
    "duration": 1199,
    "start_time": "2022-03-01T17:57:28.138Z"
   },
   {
    "duration": 1195,
    "start_time": "2022-03-01T17:57:28.143Z"
   },
   {
    "duration": 1193,
    "start_time": "2022-03-01T17:57:28.147Z"
   },
   {
    "duration": 1184,
    "start_time": "2022-03-01T17:57:28.158Z"
   },
   {
    "duration": 1180,
    "start_time": "2022-03-01T17:57:28.163Z"
   },
   {
    "duration": 1171,
    "start_time": "2022-03-01T17:57:28.174Z"
   },
   {
    "duration": 1167,
    "start_time": "2022-03-01T17:57:28.179Z"
   },
   {
    "duration": 1159,
    "start_time": "2022-03-01T17:57:28.189Z"
   },
   {
    "duration": 1155,
    "start_time": "2022-03-01T17:57:28.194Z"
   },
   {
    "duration": 1147,
    "start_time": "2022-03-01T17:57:28.204Z"
   },
   {
    "duration": 1142,
    "start_time": "2022-03-01T17:57:28.210Z"
   },
   {
    "duration": 1140,
    "start_time": "2022-03-01T17:57:28.213Z"
   },
   {
    "duration": 1131,
    "start_time": "2022-03-01T17:57:28.223Z"
   },
   {
    "duration": 1128,
    "start_time": "2022-03-01T17:57:28.228Z"
   },
   {
    "duration": 1121,
    "start_time": "2022-03-01T17:57:28.236Z"
   },
   {
    "duration": 1119,
    "start_time": "2022-03-01T17:57:28.239Z"
   },
   {
    "duration": 1116,
    "start_time": "2022-03-01T17:57:28.244Z"
   },
   {
    "duration": 1108,
    "start_time": "2022-03-01T17:57:28.252Z"
   },
   {
    "duration": 1107,
    "start_time": "2022-03-01T17:57:28.255Z"
   },
   {
    "duration": 1126,
    "start_time": "2022-03-01T17:57:28.261Z"
   },
   {
    "duration": 1118,
    "start_time": "2022-03-01T17:57:28.270Z"
   },
   {
    "duration": 1117,
    "start_time": "2022-03-01T17:57:28.273Z"
   },
   {
    "duration": 1114,
    "start_time": "2022-03-01T17:57:28.277Z"
   },
   {
    "duration": 1113,
    "start_time": "2022-03-01T17:57:28.280Z"
   },
   {
    "duration": 1110,
    "start_time": "2022-03-01T17:57:28.284Z"
   },
   {
    "duration": 1109,
    "start_time": "2022-03-01T17:57:28.287Z"
   },
   {
    "duration": 1107,
    "start_time": "2022-03-01T17:57:28.290Z"
   },
   {
    "duration": 5225,
    "start_time": "2022-03-01T17:57:41.902Z"
   },
   {
    "duration": 5269,
    "start_time": "2022-03-01T17:58:33.804Z"
   },
   {
    "duration": 5796,
    "start_time": "2022-03-01T17:59:27.220Z"
   },
   {
    "duration": 5411,
    "start_time": "2022-03-01T17:59:38.361Z"
   },
   {
    "duration": 6054,
    "start_time": "2022-03-01T18:07:00.142Z"
   },
   {
    "duration": 5313,
    "start_time": "2022-03-01T18:07:12.062Z"
   },
   {
    "duration": 804,
    "start_time": "2022-03-01T18:10:08.535Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T18:10:09.343Z"
   },
   {
    "duration": 34,
    "start_time": "2022-03-01T18:10:09.358Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-01T18:10:09.396Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T18:10:09.420Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T18:10:09.428Z"
   },
   {
    "duration": 48,
    "start_time": "2022-03-01T18:10:09.441Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-01T18:10:09.491Z"
   },
   {
    "duration": 330,
    "start_time": "2022-03-01T18:10:09.509Z"
   },
   {
    "duration": 3041,
    "start_time": "2022-03-01T18:10:06.806Z"
   },
   {
    "duration": 3036,
    "start_time": "2022-03-01T18:10:06.813Z"
   },
   {
    "duration": 3033,
    "start_time": "2022-03-01T18:10:06.818Z"
   },
   {
    "duration": 3032,
    "start_time": "2022-03-01T18:10:06.821Z"
   },
   {
    "duration": 3029,
    "start_time": "2022-03-01T18:10:06.825Z"
   },
   {
    "duration": 3028,
    "start_time": "2022-03-01T18:10:06.828Z"
   },
   {
    "duration": 3025,
    "start_time": "2022-03-01T18:10:06.832Z"
   },
   {
    "duration": 3024,
    "start_time": "2022-03-01T18:10:06.835Z"
   },
   {
    "duration": 3020,
    "start_time": "2022-03-01T18:10:06.840Z"
   },
   {
    "duration": 3019,
    "start_time": "2022-03-01T18:10:06.843Z"
   },
   {
    "duration": 3018,
    "start_time": "2022-03-01T18:10:06.846Z"
   },
   {
    "duration": 3016,
    "start_time": "2022-03-01T18:10:06.849Z"
   },
   {
    "duration": 3029,
    "start_time": "2022-03-01T18:10:06.854Z"
   },
   {
    "duration": 3027,
    "start_time": "2022-03-01T18:10:06.858Z"
   },
   {
    "duration": 3026,
    "start_time": "2022-03-01T18:10:06.861Z"
   },
   {
    "duration": 3025,
    "start_time": "2022-03-01T18:10:06.864Z"
   },
   {
    "duration": 3024,
    "start_time": "2022-03-01T18:10:06.867Z"
   },
   {
    "duration": 2793,
    "start_time": "2022-03-01T18:10:07.100Z"
   },
   {
    "duration": 2792,
    "start_time": "2022-03-01T18:10:07.103Z"
   },
   {
    "duration": 2789,
    "start_time": "2022-03-01T18:10:07.108Z"
   },
   {
    "duration": 2788,
    "start_time": "2022-03-01T18:10:07.111Z"
   },
   {
    "duration": 2788,
    "start_time": "2022-03-01T18:10:07.114Z"
   },
   {
    "duration": 2787,
    "start_time": "2022-03-01T18:10:07.117Z"
   },
   {
    "duration": 2786,
    "start_time": "2022-03-01T18:10:07.120Z"
   },
   {
    "duration": 2785,
    "start_time": "2022-03-01T18:10:07.123Z"
   },
   {
    "duration": 2783,
    "start_time": "2022-03-01T18:10:07.127Z"
   },
   {
    "duration": 2782,
    "start_time": "2022-03-01T18:10:07.130Z"
   },
   {
    "duration": 2782,
    "start_time": "2022-03-01T18:10:07.133Z"
   },
   {
    "duration": 2781,
    "start_time": "2022-03-01T18:10:07.136Z"
   },
   {
    "duration": 2778,
    "start_time": "2022-03-01T18:10:07.140Z"
   },
   {
    "duration": 2777,
    "start_time": "2022-03-01T18:10:07.143Z"
   },
   {
    "duration": 2775,
    "start_time": "2022-03-01T18:10:07.146Z"
   },
   {
    "duration": 2773,
    "start_time": "2022-03-01T18:10:07.149Z"
   },
   {
    "duration": 2771,
    "start_time": "2022-03-01T18:10:07.153Z"
   },
   {
    "duration": 2769,
    "start_time": "2022-03-01T18:10:07.156Z"
   },
   {
    "duration": 2768,
    "start_time": "2022-03-01T18:10:07.159Z"
   },
   {
    "duration": 2825,
    "start_time": "2022-03-01T18:10:07.162Z"
   },
   {
    "duration": 2823,
    "start_time": "2022-03-01T18:10:07.165Z"
   },
   {
    "duration": 2822,
    "start_time": "2022-03-01T18:10:07.168Z"
   },
   {
    "duration": 2819,
    "start_time": "2022-03-01T18:10:07.172Z"
   },
   {
    "duration": 2818,
    "start_time": "2022-03-01T18:10:07.175Z"
   },
   {
    "duration": 2817,
    "start_time": "2022-03-01T18:10:07.178Z"
   },
   {
    "duration": 2816,
    "start_time": "2022-03-01T18:10:07.181Z"
   },
   {
    "duration": 2814,
    "start_time": "2022-03-01T18:10:07.185Z"
   },
   {
    "duration": 2812,
    "start_time": "2022-03-01T18:10:07.188Z"
   },
   {
    "duration": 2802,
    "start_time": "2022-03-01T18:10:07.199Z"
   },
   {
    "duration": 2801,
    "start_time": "2022-03-01T18:10:07.202Z"
   },
   {
    "duration": 2798,
    "start_time": "2022-03-01T18:10:07.206Z"
   },
   {
    "duration": 2796,
    "start_time": "2022-03-01T18:10:07.209Z"
   },
   {
    "duration": 2794,
    "start_time": "2022-03-01T18:10:07.213Z"
   },
   {
    "duration": 2792,
    "start_time": "2022-03-01T18:10:07.216Z"
   },
   {
    "duration": 2790,
    "start_time": "2022-03-01T18:10:07.220Z"
   },
   {
    "duration": 2789,
    "start_time": "2022-03-01T18:10:07.223Z"
   },
   {
    "duration": 2787,
    "start_time": "2022-03-01T18:10:07.226Z"
   },
   {
    "duration": 2786,
    "start_time": "2022-03-01T18:10:07.229Z"
   },
   {
    "duration": 2785,
    "start_time": "2022-03-01T18:10:07.233Z"
   },
   {
    "duration": 2783,
    "start_time": "2022-03-01T18:10:07.236Z"
   },
   {
    "duration": 2781,
    "start_time": "2022-03-01T18:10:07.240Z"
   },
   {
    "duration": 2780,
    "start_time": "2022-03-01T18:10:07.243Z"
   },
   {
    "duration": 2779,
    "start_time": "2022-03-01T18:10:07.246Z"
   },
   {
    "duration": 2838,
    "start_time": "2022-03-01T18:10:07.249Z"
   },
   {
    "duration": 2837,
    "start_time": "2022-03-01T18:10:07.252Z"
   },
   {
    "duration": 5378,
    "start_time": "2022-03-01T18:10:48.289Z"
   },
   {
    "duration": 5461,
    "start_time": "2022-03-01T18:17:13.485Z"
   },
   {
    "duration": 5382,
    "start_time": "2022-03-01T18:21:11.701Z"
   },
   {
    "duration": 946,
    "start_time": "2022-03-01T18:32:29.955Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T18:32:30.904Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-01T18:32:30.920Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-01T18:32:30.940Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-01T18:32:30.986Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-01T18:32:30.995Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-01T18:32:31.015Z"
   },
   {
    "duration": 50,
    "start_time": "2022-03-01T18:32:31.044Z"
   },
   {
    "duration": 396,
    "start_time": "2022-03-01T18:32:31.097Z"
   },
   {
    "duration": 3330,
    "start_time": "2022-03-01T18:32:28.168Z"
   },
   {
    "duration": 3328,
    "start_time": "2022-03-01T18:32:28.172Z"
   },
   {
    "duration": 3321,
    "start_time": "2022-03-01T18:32:28.180Z"
   },
   {
    "duration": 3319,
    "start_time": "2022-03-01T18:32:28.184Z"
   },
   {
    "duration": 3317,
    "start_time": "2022-03-01T18:32:28.188Z"
   },
   {
    "duration": 3314,
    "start_time": "2022-03-01T18:32:28.192Z"
   },
   {
    "duration": 3313,
    "start_time": "2022-03-01T18:32:28.195Z"
   },
   {
    "duration": 3311,
    "start_time": "2022-03-01T18:32:28.199Z"
   },
   {
    "duration": 3309,
    "start_time": "2022-03-01T18:32:28.203Z"
   },
   {
    "duration": 3307,
    "start_time": "2022-03-01T18:32:28.206Z"
   },
   {
    "duration": 3305,
    "start_time": "2022-03-01T18:32:28.210Z"
   },
   {
    "duration": 3304,
    "start_time": "2022-03-01T18:32:28.213Z"
   },
   {
    "duration": 3301,
    "start_time": "2022-03-01T18:32:28.217Z"
   },
   {
    "duration": 3300,
    "start_time": "2022-03-01T18:32:28.220Z"
   },
   {
    "duration": 3291,
    "start_time": "2022-03-01T18:32:28.231Z"
   },
   {
    "duration": 3288,
    "start_time": "2022-03-01T18:32:28.235Z"
   },
   {
    "duration": 2888,
    "start_time": "2022-03-01T18:32:28.637Z"
   },
   {
    "duration": 2879,
    "start_time": "2022-03-01T18:32:28.647Z"
   },
   {
    "duration": 2869,
    "start_time": "2022-03-01T18:32:28.659Z"
   },
   {
    "duration": 2866,
    "start_time": "2022-03-01T18:32:28.663Z"
   },
   {
    "duration": 2856,
    "start_time": "2022-03-01T18:32:28.675Z"
   },
   {
    "duration": 2854,
    "start_time": "2022-03-01T18:32:28.678Z"
   },
   {
    "duration": 2843,
    "start_time": "2022-03-01T18:32:28.691Z"
   },
   {
    "duration": 2892,
    "start_time": "2022-03-01T18:32:28.695Z"
   },
   {
    "duration": 2882,
    "start_time": "2022-03-01T18:32:28.706Z"
   },
   {
    "duration": 2881,
    "start_time": "2022-03-01T18:32:28.709Z"
   },
   {
    "duration": 2878,
    "start_time": "2022-03-01T18:32:28.713Z"
   },
   {
    "duration": 2867,
    "start_time": "2022-03-01T18:32:28.726Z"
   },
   {
    "duration": 2863,
    "start_time": "2022-03-01T18:32:28.731Z"
   },
   {
    "duration": 2862,
    "start_time": "2022-03-01T18:32:28.734Z"
   },
   {
    "duration": 2859,
    "start_time": "2022-03-01T18:32:28.738Z"
   },
   {
    "duration": 2858,
    "start_time": "2022-03-01T18:32:28.741Z"
   },
   {
    "duration": 2845,
    "start_time": "2022-03-01T18:32:28.756Z"
   },
   {
    "duration": 2844,
    "start_time": "2022-03-01T18:32:28.759Z"
   },
   {
    "duration": 2839,
    "start_time": "2022-03-01T18:32:28.765Z"
   },
   {
    "duration": 2838,
    "start_time": "2022-03-01T18:32:28.768Z"
   },
   {
    "duration": 2827,
    "start_time": "2022-03-01T18:32:28.780Z"
   },
   {
    "duration": 2826,
    "start_time": "2022-03-01T18:32:28.783Z"
   },
   {
    "duration": 2824,
    "start_time": "2022-03-01T18:32:28.787Z"
   },
   {
    "duration": 2822,
    "start_time": "2022-03-01T18:32:28.790Z"
   },
   {
    "duration": 2819,
    "start_time": "2022-03-01T18:32:28.794Z"
   },
   {
    "duration": 2818,
    "start_time": "2022-03-01T18:32:28.797Z"
   },
   {
    "duration": 2807,
    "start_time": "2022-03-01T18:32:28.810Z"
   },
   {
    "duration": 2803,
    "start_time": "2022-03-01T18:32:28.815Z"
   },
   {
    "duration": 2794,
    "start_time": "2022-03-01T18:32:28.826Z"
   },
   {
    "duration": 2792,
    "start_time": "2022-03-01T18:32:28.829Z"
   },
   {
    "duration": 2782,
    "start_time": "2022-03-01T18:32:28.841Z"
   },
   {
    "duration": 2779,
    "start_time": "2022-03-01T18:32:28.845Z"
   },
   {
    "duration": 2769,
    "start_time": "2022-03-01T18:32:28.857Z"
   },
   {
    "duration": 2766,
    "start_time": "2022-03-01T18:32:28.861Z"
   },
   {
    "duration": 2764,
    "start_time": "2022-03-01T18:32:28.864Z"
   },
   {
    "duration": 2753,
    "start_time": "2022-03-01T18:32:28.876Z"
   },
   {
    "duration": 2806,
    "start_time": "2022-03-01T18:32:28.880Z"
   },
   {
    "duration": 2796,
    "start_time": "2022-03-01T18:32:28.892Z"
   },
   {
    "duration": 2794,
    "start_time": "2022-03-01T18:32:28.896Z"
   },
   {
    "duration": 2783,
    "start_time": "2022-03-01T18:32:28.908Z"
   },
   {
    "duration": 2782,
    "start_time": "2022-03-01T18:32:28.911Z"
   },
   {
    "duration": 2772,
    "start_time": "2022-03-01T18:32:28.922Z"
   },
   {
    "duration": 2769,
    "start_time": "2022-03-01T18:32:28.927Z"
   },
   {
    "duration": 2767,
    "start_time": "2022-03-01T18:32:28.930Z"
   },
   {
    "duration": 2755,
    "start_time": "2022-03-01T18:32:28.943Z"
   },
   {
    "duration": 2753,
    "start_time": "2022-03-01T18:32:28.947Z"
   },
   {
    "duration": 1022,
    "start_time": "2022-03-01T18:32:41.045Z"
   },
   {
    "duration": 1005,
    "start_time": "2022-03-01T18:33:42.262Z"
   },
   {
    "duration": 6089,
    "start_time": "2022-03-01T18:36:59.396Z"
   },
   {
    "duration": 1070,
    "start_time": "2022-03-01T18:37:31.378Z"
   },
   {
    "duration": 87,
    "start_time": "2022-03-01T18:38:33.766Z"
   },
   {
    "duration": 5383,
    "start_time": "2022-03-01T18:39:37.732Z"
   },
   {
    "duration": 1067,
    "start_time": "2022-03-01T18:43:10.768Z"
   },
   {
    "duration": 5336,
    "start_time": "2022-03-01T18:43:20.852Z"
   },
   {
    "duration": 5411,
    "start_time": "2022-03-01T18:43:50.092Z"
   },
   {
    "duration": 5737,
    "start_time": "2022-03-01T18:47:15.848Z"
   },
   {
    "duration": 1007,
    "start_time": "2022-03-01T18:49:32.869Z"
   },
   {
    "duration": 82,
    "start_time": "2022-03-01T18:50:11.031Z"
   },
   {
    "duration": 3059,
    "start_time": "2022-03-01T18:50:26.459Z"
   },
   {
    "duration": 5489,
    "start_time": "2022-03-01T18:50:35.539Z"
   },
   {
    "duration": 5562,
    "start_time": "2022-03-01T18:51:55.339Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-01T18:53:38.298Z"
   },
   {
    "duration": 1051,
    "start_time": "2022-03-01T18:56:17.398Z"
   },
   {
    "duration": 233,
    "start_time": "2022-03-01T18:57:21.639Z"
   },
   {
    "duration": 247,
    "start_time": "2022-03-01T18:57:26.848Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-01T18:59:28.140Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T19:00:01.645Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-01T19:02:55.719Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-01T19:06:16.452Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-01T19:08:33.080Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-01T19:08:42.950Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-01T19:09:58.901Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-01T19:10:12.557Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-01T19:10:24.277Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T19:11:03.866Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T19:11:43.190Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T19:11:46.622Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T19:14:54.289Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-01T19:19:17.181Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-01T19:21:19.867Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T19:21:21.972Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-01T19:24:08.686Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-01T19:24:12.258Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T19:24:28.750Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-01T19:25:51.409Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T19:26:19.195Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-01T19:27:02.874Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-01T19:27:19.179Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-01T19:27:28.908Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T19:32:30.832Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T19:38:38.036Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T19:39:00.087Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-01T19:50:53.989Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-01T19:54:16.215Z"
   },
   {
    "duration": 229,
    "start_time": "2022-03-01T19:59:38.581Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-01T20:00:53.283Z"
   },
   {
    "duration": 231,
    "start_time": "2022-03-01T20:01:20.610Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-01T20:01:29.528Z"
   },
   {
    "duration": 70,
    "start_time": "2022-03-01T20:02:51.691Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T20:03:37.317Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-01T20:06:19.276Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T20:06:25.036Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T20:06:29.004Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-01T20:07:37.256Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T20:07:44.052Z"
   },
   {
    "duration": 81,
    "start_time": "2022-03-01T20:08:08.636Z"
   },
   {
    "duration": 5211,
    "start_time": "2022-03-01T20:08:20.304Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T20:08:39.735Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T20:08:42.262Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-01T23:19:44.086Z"
   },
   {
    "duration": 296,
    "start_time": "2022-03-01T23:19:51.445Z"
   },
   {
    "duration": 258,
    "start_time": "2022-03-01T23:20:13.598Z"
   },
   {
    "duration": 631,
    "start_time": "2022-03-01T23:20:42.917Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-01T23:20:43.550Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-01T23:20:43.559Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-01T23:20:43.571Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-01T23:20:43.585Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-01T23:20:43.590Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-01T23:20:43.602Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-01T23:20:43.617Z"
   },
   {
    "duration": 316,
    "start_time": "2022-03-01T23:20:43.630Z"
   },
   {
    "duration": 333,
    "start_time": "2022-03-01T23:20:43.616Z"
   },
   {
    "duration": 330,
    "start_time": "2022-03-01T23:20:43.620Z"
   },
   {
    "duration": 322,
    "start_time": "2022-03-01T23:20:43.629Z"
   },
   {
    "duration": 319,
    "start_time": "2022-03-01T23:20:43.633Z"
   },
   {
    "duration": 317,
    "start_time": "2022-03-01T23:20:43.636Z"
   },
   {
    "duration": 314,
    "start_time": "2022-03-01T23:20:43.640Z"
   },
   {
    "duration": 312,
    "start_time": "2022-03-01T23:20:43.644Z"
   },
   {
    "duration": 310,
    "start_time": "2022-03-01T23:20:43.647Z"
   },
   {
    "duration": 307,
    "start_time": "2022-03-01T23:20:43.651Z"
   },
   {
    "duration": 305,
    "start_time": "2022-03-01T23:20:43.654Z"
   },
   {
    "duration": 303,
    "start_time": "2022-03-01T23:20:43.657Z"
   },
   {
    "duration": 300,
    "start_time": "2022-03-01T23:20:43.661Z"
   },
   {
    "duration": 293,
    "start_time": "2022-03-01T23:20:43.669Z"
   },
   {
    "duration": 90,
    "start_time": "2022-03-01T23:20:43.873Z"
   },
   {
    "duration": 80,
    "start_time": "2022-03-01T23:20:43.883Z"
   },
   {
    "duration": 78,
    "start_time": "2022-03-01T23:20:43.886Z"
   },
   {
    "duration": 76,
    "start_time": "2022-03-01T23:20:43.889Z"
   },
   {
    "duration": 73,
    "start_time": "2022-03-01T23:20:43.893Z"
   },
   {
    "duration": 70,
    "start_time": "2022-03-01T23:20:43.897Z"
   },
   {
    "duration": 68,
    "start_time": "2022-03-01T23:20:43.900Z"
   },
   {
    "duration": 66,
    "start_time": "2022-03-01T23:20:43.903Z"
   },
   {
    "duration": 64,
    "start_time": "2022-03-01T23:20:43.906Z"
   },
   {
    "duration": 62,
    "start_time": "2022-03-01T23:20:43.909Z"
   },
   {
    "duration": 60,
    "start_time": "2022-03-01T23:20:43.912Z"
   },
   {
    "duration": 58,
    "start_time": "2022-03-01T23:20:43.915Z"
   },
   {
    "duration": 56,
    "start_time": "2022-03-01T23:20:43.918Z"
   },
   {
    "duration": 54,
    "start_time": "2022-03-01T23:20:43.921Z"
   },
   {
    "duration": -136,
    "start_time": "2022-03-01T23:20:44.112Z"
   },
   {
    "duration": -138,
    "start_time": "2022-03-01T23:20:44.115Z"
   },
   {
    "duration": -141,
    "start_time": "2022-03-01T23:20:44.119Z"
   },
   {
    "duration": -144,
    "start_time": "2022-03-01T23:20:44.122Z"
   },
   {
    "duration": -148,
    "start_time": "2022-03-01T23:20:44.127Z"
   },
   {
    "duration": -151,
    "start_time": "2022-03-01T23:20:44.131Z"
   },
   {
    "duration": -153,
    "start_time": "2022-03-01T23:20:44.134Z"
   },
   {
    "duration": -155,
    "start_time": "2022-03-01T23:20:44.137Z"
   },
   {
    "duration": -157,
    "start_time": "2022-03-01T23:20:44.140Z"
   },
   {
    "duration": -159,
    "start_time": "2022-03-01T23:20:44.143Z"
   },
   {
    "duration": -162,
    "start_time": "2022-03-01T23:20:44.147Z"
   },
   {
    "duration": -164,
    "start_time": "2022-03-01T23:20:44.150Z"
   },
   {
    "duration": -166,
    "start_time": "2022-03-01T23:20:44.153Z"
   },
   {
    "duration": -307,
    "start_time": "2022-03-01T23:20:44.294Z"
   },
   {
    "duration": -330,
    "start_time": "2022-03-01T23:20:44.318Z"
   },
   {
    "duration": -332,
    "start_time": "2022-03-01T23:20:44.321Z"
   },
   {
    "duration": -334,
    "start_time": "2022-03-01T23:20:44.324Z"
   },
   {
    "duration": -337,
    "start_time": "2022-03-01T23:20:44.328Z"
   },
   {
    "duration": -339,
    "start_time": "2022-03-01T23:20:44.331Z"
   },
   {
    "duration": -341,
    "start_time": "2022-03-01T23:20:44.334Z"
   },
   {
    "duration": -344,
    "start_time": "2022-03-01T23:20:44.338Z"
   },
   {
    "duration": -346,
    "start_time": "2022-03-01T23:20:44.341Z"
   },
   {
    "duration": -348,
    "start_time": "2022-03-01T23:20:44.344Z"
   },
   {
    "duration": -351,
    "start_time": "2022-03-01T23:20:44.347Z"
   },
   {
    "duration": -353,
    "start_time": "2022-03-01T23:20:44.350Z"
   },
   {
    "duration": -355,
    "start_time": "2022-03-01T23:20:44.353Z"
   },
   {
    "duration": -357,
    "start_time": "2022-03-01T23:20:44.357Z"
   },
   {
    "duration": -359,
    "start_time": "2022-03-01T23:20:44.360Z"
   },
   {
    "duration": -480,
    "start_time": "2022-03-01T23:20:44.482Z"
   },
   {
    "duration": -490,
    "start_time": "2022-03-01T23:20:44.493Z"
   },
   {
    "duration": -493,
    "start_time": "2022-03-01T23:20:44.497Z"
   },
   {
    "duration": -495,
    "start_time": "2022-03-01T23:20:44.500Z"
   },
   {
    "duration": -500,
    "start_time": "2022-03-01T23:20:44.505Z"
   },
   {
    "duration": -502,
    "start_time": "2022-03-01T23:20:44.508Z"
   },
   {
    "duration": 251,
    "start_time": "2022-03-01T23:21:55.903Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-01T23:22:11.076Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-01T23:22:14.772Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-01T23:22:24.983Z"
   },
   {
    "duration": 263,
    "start_time": "2022-03-01T23:27:08.036Z"
   },
   {
    "duration": 264,
    "start_time": "2022-03-01T23:27:16.319Z"
   },
   {
    "duration": 4928,
    "start_time": "2022-03-01T23:28:00.529Z"
   },
   {
    "duration": 4876,
    "start_time": "2022-03-01T23:28:46.777Z"
   },
   {
    "duration": 4943,
    "start_time": "2022-03-01T23:29:12.122Z"
   },
   {
    "duration": 270,
    "start_time": "2022-03-01T23:30:33.963Z"
   },
   {
    "duration": 271,
    "start_time": "2022-03-01T23:30:54.851Z"
   },
   {
    "duration": 4829,
    "start_time": "2022-03-01T23:31:44.690Z"
   },
   {
    "duration": 5029,
    "start_time": "2022-03-01T23:32:44.688Z"
   },
   {
    "duration": 1814,
    "start_time": "2022-03-01T23:46:38.320Z"
   },
   {
    "duration": 377,
    "start_time": "2022-03-02T19:05:47.400Z"
   },
   {
    "duration": 289,
    "start_time": "2022-03-04T18:55:18.718Z"
   },
   {
    "duration": 811,
    "start_time": "2022-03-04T18:55:35.265Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-04T18:55:36.078Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-04T18:55:36.092Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-04T18:55:36.109Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-04T18:55:36.128Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-04T18:55:36.138Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-04T18:55:36.183Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-04T18:55:36.206Z"
   },
   {
    "duration": 322,
    "start_time": "2022-03-04T18:55:36.223Z"
   },
   {
    "duration": 673,
    "start_time": "2022-03-04T18:55:35.878Z"
   },
   {
    "duration": 467,
    "start_time": "2022-03-04T18:55:36.086Z"
   },
   {
    "duration": 457,
    "start_time": "2022-03-04T18:55:36.097Z"
   },
   {
    "duration": 455,
    "start_time": "2022-03-04T18:55:36.101Z"
   },
   {
    "duration": 454,
    "start_time": "2022-03-04T18:55:36.104Z"
   },
   {
    "duration": 452,
    "start_time": "2022-03-04T18:55:36.108Z"
   },
   {
    "duration": 450,
    "start_time": "2022-03-04T18:55:36.111Z"
   },
   {
    "duration": 449,
    "start_time": "2022-03-04T18:55:36.115Z"
   },
   {
    "duration": 446,
    "start_time": "2022-03-04T18:55:36.119Z"
   },
   {
    "duration": 437,
    "start_time": "2022-03-04T18:55:36.130Z"
   },
   {
    "duration": 434,
    "start_time": "2022-03-04T18:55:36.134Z"
   },
   {
    "duration": 432,
    "start_time": "2022-03-04T18:55:36.138Z"
   },
   {
    "duration": 430,
    "start_time": "2022-03-04T18:55:36.141Z"
   },
   {
    "duration": 429,
    "start_time": "2022-03-04T18:55:36.144Z"
   },
   {
    "duration": 427,
    "start_time": "2022-03-04T18:55:36.147Z"
   },
   {
    "duration": 417,
    "start_time": "2022-03-04T18:55:36.159Z"
   },
   {
    "duration": 415,
    "start_time": "2022-03-04T18:55:36.162Z"
   },
   {
    "duration": 404,
    "start_time": "2022-03-04T18:55:36.175Z"
   },
   {
    "duration": 402,
    "start_time": "2022-03-04T18:55:36.178Z"
   },
   {
    "duration": 399,
    "start_time": "2022-03-04T18:55:36.182Z"
   },
   {
    "duration": 391,
    "start_time": "2022-03-04T18:55:36.192Z"
   },
   {
    "duration": 388,
    "start_time": "2022-03-04T18:55:36.196Z"
   },
   {
    "duration": 380,
    "start_time": "2022-03-04T18:55:36.206Z"
   },
   {
    "duration": 378,
    "start_time": "2022-03-04T18:55:36.209Z"
   },
   {
    "duration": 376,
    "start_time": "2022-03-04T18:55:36.212Z"
   },
   {
    "duration": 373,
    "start_time": "2022-03-04T18:55:36.217Z"
   },
   {
    "duration": 364,
    "start_time": "2022-03-04T18:55:36.227Z"
   },
   {
    "duration": 362,
    "start_time": "2022-03-04T18:55:36.231Z"
   },
   {
    "duration": 353,
    "start_time": "2022-03-04T18:55:36.241Z"
   },
   {
    "duration": 351,
    "start_time": "2022-03-04T18:55:36.245Z"
   },
   {
    "duration": 342,
    "start_time": "2022-03-04T18:55:36.255Z"
   },
   {
    "duration": 341,
    "start_time": "2022-03-04T18:55:36.258Z"
   },
   {
    "duration": 339,
    "start_time": "2022-03-04T18:55:36.261Z"
   },
   {
    "duration": 338,
    "start_time": "2022-03-04T18:55:36.264Z"
   },
   {
    "duration": 328,
    "start_time": "2022-03-04T18:55:36.275Z"
   },
   {
    "duration": 327,
    "start_time": "2022-03-04T18:55:36.278Z"
   },
   {
    "duration": 316,
    "start_time": "2022-03-04T18:55:36.291Z"
   },
   {
    "duration": 314,
    "start_time": "2022-03-04T18:55:36.294Z"
   },
   {
    "duration": 313,
    "start_time": "2022-03-04T18:55:36.297Z"
   },
   {
    "duration": 302,
    "start_time": "2022-03-04T18:55:36.309Z"
   },
   {
    "duration": 301,
    "start_time": "2022-03-04T18:55:36.312Z"
   },
   {
    "duration": 289,
    "start_time": "2022-03-04T18:55:36.325Z"
   },
   {
    "duration": 287,
    "start_time": "2022-03-04T18:55:36.329Z"
   },
   {
    "duration": 276,
    "start_time": "2022-03-04T18:55:36.341Z"
   },
   {
    "duration": 274,
    "start_time": "2022-03-04T18:55:36.345Z"
   },
   {
    "duration": 262,
    "start_time": "2022-03-04T18:55:36.358Z"
   },
   {
    "duration": 261,
    "start_time": "2022-03-04T18:55:36.361Z"
   },
   {
    "duration": 258,
    "start_time": "2022-03-04T18:55:36.365Z"
   },
   {
    "duration": 248,
    "start_time": "2022-03-04T18:55:36.376Z"
   },
   {
    "duration": 243,
    "start_time": "2022-03-04T18:55:36.382Z"
   },
   {
    "duration": 212,
    "start_time": "2022-03-04T18:55:36.471Z"
   },
   {
    "duration": 53,
    "start_time": "2022-03-04T18:55:36.631Z"
   },
   {
    "duration": 38,
    "start_time": "2022-03-04T18:55:36.648Z"
   },
   {
    "duration": 29,
    "start_time": "2022-03-04T18:55:36.658Z"
   },
   {
    "duration": 28,
    "start_time": "2022-03-04T18:55:36.661Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-04T18:55:36.673Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-04T18:55:36.676Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-04T18:55:36.679Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-04T18:55:36.690Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-04T18:55:36.693Z"
   },
   {
    "duration": 1,
    "start_time": "2022-03-04T18:55:36.696Z"
   },
   {
    "duration": 6014,
    "start_time": "2022-03-04T18:56:35.243Z"
   },
   {
    "duration": 75,
    "start_time": "2022-03-04T18:57:35.523Z"
   },
   {
    "duration": 71,
    "start_time": "2022-03-04T18:57:55.274Z"
   },
   {
    "duration": 90,
    "start_time": "2022-03-04T18:58:22.328Z"
   },
   {
    "duration": 92,
    "start_time": "2022-03-04T18:58:41.750Z"
   },
   {
    "duration": 77,
    "start_time": "2022-03-04T18:58:56.387Z"
   },
   {
    "duration": 76,
    "start_time": "2022-03-04T18:59:01.450Z"
   },
   {
    "duration": 84,
    "start_time": "2022-03-04T18:59:06.875Z"
   },
   {
    "duration": 80,
    "start_time": "2022-03-04T18:59:29.453Z"
   },
   {
    "duration": 293,
    "start_time": "2022-03-04T19:00:46.312Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-04T19:01:01.896Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-04T19:01:50.035Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-04T19:01:55.355Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-04T19:02:11.153Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-04T19:02:31.549Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-04T19:02:42.679Z"
   },
   {
    "duration": 275,
    "start_time": "2022-03-04T19:26:11.439Z"
   },
   {
    "duration": 255,
    "start_time": "2022-03-04T22:28:48.218Z"
   },
   {
    "duration": 336,
    "start_time": "2022-03-04T22:33:53.684Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-04T23:07:14.303Z"
   },
   {
    "duration": 87,
    "start_time": "2022-03-04T23:07:21.178Z"
   },
   {
    "duration": 83,
    "start_time": "2022-03-04T23:07:31.392Z"
   },
   {
    "duration": 80,
    "start_time": "2022-03-04T23:07:37.402Z"
   },
   {
    "duration": 414,
    "start_time": "2022-03-04T23:07:43.157Z"
   },
   {
    "duration": 103,
    "start_time": "2022-03-04T23:15:54.576Z"
   },
   {
    "duration": 413,
    "start_time": "2022-03-04T23:16:04.236Z"
   },
   {
    "duration": 405,
    "start_time": "2022-03-04T23:16:51.475Z"
   },
   {
    "duration": 396,
    "start_time": "2022-03-04T23:17:13.087Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-04T23:18:29.846Z"
   },
   {
    "duration": 259,
    "start_time": "2022-03-04T23:18:35.070Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-04T23:19:03.307Z"
   },
   {
    "duration": 240,
    "start_time": "2022-03-04T23:20:17.417Z"
   },
   {
    "duration": 56,
    "start_time": "2022-03-04T23:29:35.301Z"
   },
   {
    "duration": 251,
    "start_time": "2022-03-04T23:31:10.425Z"
   },
   {
    "duration": 239,
    "start_time": "2022-03-04T23:31:39.527Z"
   },
   {
    "duration": 251,
    "start_time": "2022-03-04T23:32:12.125Z"
   },
   {
    "duration": 88,
    "start_time": "2022-03-04T23:32:53.901Z"
   },
   {
    "duration": 94,
    "start_time": "2022-03-04T23:33:10.231Z"
   },
   {
    "duration": 38,
    "start_time": "2022-03-04T23:34:58.137Z"
   },
   {
    "duration": 37,
    "start_time": "2022-03-04T23:36:15.632Z"
   },
   {
    "duration": 236,
    "start_time": "2022-03-04T23:41:44.675Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-04T23:41:55.711Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-04T23:42:50.256Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-04T23:45:27.039Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-04T23:45:48.208Z"
   },
   {
    "duration": 249,
    "start_time": "2022-03-04T23:47:03.154Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-04T23:47:19.273Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-04T23:48:19.364Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-04T23:49:53.212Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-04T23:53:00.155Z"
   },
   {
    "duration": 85,
    "start_time": "2022-03-04T23:53:27.835Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-04T23:53:40.505Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-04T23:53:45.763Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-04T23:53:54.840Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-04T23:53:59.314Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-04T23:54:15.894Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-04T23:57:04.025Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-05T00:01:01.576Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-05T00:02:46.098Z"
   },
   {
    "duration": 244,
    "start_time": "2022-03-05T00:04:11.696Z"
   },
   {
    "duration": 240,
    "start_time": "2022-03-05T00:04:20.993Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-05T00:04:28.071Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-05T00:05:38.382Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-05T00:06:41.364Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-05T00:06:51.414Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-05T00:07:39.791Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-05T00:13:52.141Z"
   },
   {
    "duration": 269,
    "start_time": "2022-03-05T00:14:19.835Z"
   },
   {
    "duration": 481,
    "start_time": "2022-03-05T00:15:34.380Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T00:15:47.972Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-05T00:15:50.459Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T00:16:39.744Z"
   },
   {
    "duration": 475,
    "start_time": "2022-03-05T00:16:43.698Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-05T00:16:57.825Z"
   },
   {
    "duration": 1186,
    "start_time": "2022-03-05T00:17:02.357Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T00:17:28.981Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-05T00:17:31.331Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T00:19:40.551Z"
   },
   {
    "duration": 1181,
    "start_time": "2022-03-05T00:19:43.807Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-05T00:23:08.648Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-05T00:23:13.148Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T00:24:00.113Z"
   },
   {
    "duration": 780,
    "start_time": "2022-03-05T00:24:03.140Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-05T00:24:45.454Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-05T00:24:54.649Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-05T00:25:35.771Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-05T00:25:38.456Z"
   },
   {
    "duration": 496,
    "start_time": "2022-03-05T00:26:10.847Z"
   },
   {
    "duration": 530,
    "start_time": "2022-03-05T00:26:55.021Z"
   },
   {
    "duration": 5950,
    "start_time": "2022-03-05T00:29:52.805Z"
   },
   {
    "duration": 260,
    "start_time": "2022-03-05T00:30:07.546Z"
   },
   {
    "duration": 254,
    "start_time": "2022-03-05T00:30:17.959Z"
   },
   {
    "duration": 274,
    "start_time": "2022-03-05T00:30:29.778Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-05T00:30:39.111Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-05T00:31:39.996Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-05T00:32:18.261Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-05T00:32:20.265Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-05T00:33:00.569Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-05T00:39:10.916Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-05T00:39:41.570Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-05T00:39:49.388Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-05T00:40:49.096Z"
   },
   {
    "duration": 27,
    "start_time": "2022-03-05T00:42:00.915Z"
   },
   {
    "duration": 27,
    "start_time": "2022-03-05T00:42:17.117Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-05T00:42:51.298Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-05T00:43:19.397Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-05T00:50:41.290Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T00:52:29.270Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-05T00:53:45.185Z"
   },
   {
    "duration": 5685,
    "start_time": "2022-03-05T00:55:29.919Z"
   },
   {
    "duration": 78,
    "start_time": "2022-03-05T01:02:12.067Z"
   },
   {
    "duration": 235,
    "start_time": "2022-03-05T01:03:04.516Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-05T01:03:16.322Z"
   },
   {
    "duration": 253,
    "start_time": "2022-03-05T01:03:18.287Z"
   },
   {
    "duration": 411,
    "start_time": "2022-03-05T01:04:33.058Z"
   },
   {
    "duration": 409,
    "start_time": "2022-03-05T01:04:48.298Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-05T02:27:46.729Z"
   },
   {
    "duration": 59,
    "start_time": "2022-03-05T02:27:49.512Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-07T16:38:42.591Z"
   },
   {
    "duration": 352,
    "start_time": "2022-03-07T16:38:53.563Z"
   },
   {
    "duration": 458,
    "start_time": "2022-03-07T16:40:14.091Z"
   },
   {
    "duration": 342,
    "start_time": "2022-03-07T16:40:20.928Z"
   },
   {
    "duration": 812,
    "start_time": "2022-03-07T16:40:34.635Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-07T16:40:35.448Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-07T16:40:35.457Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-07T16:40:35.468Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-07T16:40:35.481Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-07T16:40:35.485Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-07T16:40:35.502Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-07T16:40:35.518Z"
   },
   {
    "duration": 689,
    "start_time": "2022-03-07T16:40:35.529Z"
   },
   {
    "duration": 1578,
    "start_time": "2022-03-07T16:40:34.643Z"
   },
   {
    "duration": 1576,
    "start_time": "2022-03-07T16:40:34.646Z"
   },
   {
    "duration": 1566,
    "start_time": "2022-03-07T16:40:34.657Z"
   },
   {
    "duration": 1562,
    "start_time": "2022-03-07T16:40:34.661Z"
   },
   {
    "duration": 1559,
    "start_time": "2022-03-07T16:40:34.665Z"
   },
   {
    "duration": 1556,
    "start_time": "2022-03-07T16:40:34.669Z"
   },
   {
    "duration": 1553,
    "start_time": "2022-03-07T16:40:34.673Z"
   },
   {
    "duration": 1549,
    "start_time": "2022-03-07T16:40:34.677Z"
   },
   {
    "duration": 1547,
    "start_time": "2022-03-07T16:40:34.680Z"
   },
   {
    "duration": 1545,
    "start_time": "2022-03-07T16:40:34.683Z"
   },
   {
    "duration": 1543,
    "start_time": "2022-03-07T16:40:34.686Z"
   },
   {
    "duration": 1539,
    "start_time": "2022-03-07T16:40:34.691Z"
   },
   {
    "duration": 1534,
    "start_time": "2022-03-07T16:40:34.697Z"
   },
   {
    "duration": 1530,
    "start_time": "2022-03-07T16:40:34.702Z"
   },
   {
    "duration": 1525,
    "start_time": "2022-03-07T16:40:34.708Z"
   },
   {
    "duration": 1516,
    "start_time": "2022-03-07T16:40:34.718Z"
   },
   {
    "duration": 1511,
    "start_time": "2022-03-07T16:40:34.724Z"
   },
   {
    "duration": 1506,
    "start_time": "2022-03-07T16:40:34.730Z"
   },
   {
    "duration": 1504,
    "start_time": "2022-03-07T16:40:34.734Z"
   },
   {
    "duration": 1499,
    "start_time": "2022-03-07T16:40:34.739Z"
   },
   {
    "duration": 1497,
    "start_time": "2022-03-07T16:40:34.742Z"
   },
   {
    "duration": 1467,
    "start_time": "2022-03-07T16:40:34.773Z"
   },
   {
    "duration": 1148,
    "start_time": "2022-03-07T16:40:35.093Z"
   },
   {
    "duration": 1131,
    "start_time": "2022-03-07T16:40:35.111Z"
   },
   {
    "duration": 1129,
    "start_time": "2022-03-07T16:40:35.114Z"
   },
   {
    "duration": 1127,
    "start_time": "2022-03-07T16:40:35.117Z"
   },
   {
    "duration": 1125,
    "start_time": "2022-03-07T16:40:35.120Z"
   },
   {
    "duration": 1122,
    "start_time": "2022-03-07T16:40:35.123Z"
   },
   {
    "duration": 1120,
    "start_time": "2022-03-07T16:40:35.126Z"
   },
   {
    "duration": 1117,
    "start_time": "2022-03-07T16:40:35.130Z"
   },
   {
    "duration": 1115,
    "start_time": "2022-03-07T16:40:35.133Z"
   },
   {
    "duration": 1113,
    "start_time": "2022-03-07T16:40:35.136Z"
   },
   {
    "duration": 1110,
    "start_time": "2022-03-07T16:40:35.140Z"
   },
   {
    "duration": 1108,
    "start_time": "2022-03-07T16:40:35.143Z"
   },
   {
    "duration": 1104,
    "start_time": "2022-03-07T16:40:35.148Z"
   },
   {
    "duration": 1100,
    "start_time": "2022-03-07T16:40:35.153Z"
   },
   {
    "duration": 1097,
    "start_time": "2022-03-07T16:40:35.157Z"
   },
   {
    "duration": 1080,
    "start_time": "2022-03-07T16:40:35.175Z"
   },
   {
    "duration": 1076,
    "start_time": "2022-03-07T16:40:35.179Z"
   },
   {
    "duration": 1072,
    "start_time": "2022-03-07T16:40:35.184Z"
   },
   {
    "duration": 1069,
    "start_time": "2022-03-07T16:40:35.188Z"
   },
   {
    "duration": 1066,
    "start_time": "2022-03-07T16:40:35.192Z"
   },
   {
    "duration": 1063,
    "start_time": "2022-03-07T16:40:35.196Z"
   },
   {
    "duration": 1060,
    "start_time": "2022-03-07T16:40:35.200Z"
   },
   {
    "duration": 1094,
    "start_time": "2022-03-07T16:40:35.206Z"
   },
   {
    "duration": 1091,
    "start_time": "2022-03-07T16:40:35.210Z"
   },
   {
    "duration": 1078,
    "start_time": "2022-03-07T16:40:35.224Z"
   },
   {
    "duration": 1075,
    "start_time": "2022-03-07T16:40:35.228Z"
   },
   {
    "duration": 1071,
    "start_time": "2022-03-07T16:40:35.233Z"
   },
   {
    "duration": 1068,
    "start_time": "2022-03-07T16:40:35.237Z"
   },
   {
    "duration": 1065,
    "start_time": "2022-03-07T16:40:35.241Z"
   },
   {
    "duration": 1063,
    "start_time": "2022-03-07T16:40:35.245Z"
   },
   {
    "duration": 1061,
    "start_time": "2022-03-07T16:40:35.248Z"
   },
   {
    "duration": 1058,
    "start_time": "2022-03-07T16:40:35.252Z"
   },
   {
    "duration": 1055,
    "start_time": "2022-03-07T16:40:35.255Z"
   },
   {
    "duration": 1053,
    "start_time": "2022-03-07T16:40:35.258Z"
   },
   {
    "duration": 1049,
    "start_time": "2022-03-07T16:40:35.263Z"
   },
   {
    "duration": 1047,
    "start_time": "2022-03-07T16:40:35.266Z"
   },
   {
    "duration": 1044,
    "start_time": "2022-03-07T16:40:35.270Z"
   },
   {
    "duration": 1042,
    "start_time": "2022-03-07T16:40:35.273Z"
   },
   {
    "duration": 1039,
    "start_time": "2022-03-07T16:40:35.277Z"
   },
   {
    "duration": 1037,
    "start_time": "2022-03-07T16:40:35.280Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-07T16:40:43.199Z"
   },
   {
    "duration": 291,
    "start_time": "2022-03-07T16:46:27.517Z"
   },
   {
    "duration": 7980,
    "start_time": "2022-03-07T16:46:38.594Z"
   },
   {
    "duration": 508,
    "start_time": "2022-03-07T16:47:13.229Z"
   },
   {
    "duration": 7439,
    "start_time": "2022-03-07T17:08:58.074Z"
   },
   {
    "duration": 1329,
    "start_time": "2022-03-07T17:09:04.186Z"
   },
   {
    "duration": 7211,
    "start_time": "2022-03-07T17:09:22.494Z"
   },
   {
    "duration": 2063,
    "start_time": "2022-03-07T17:10:39.347Z"
   },
   {
    "duration": 283,
    "start_time": "2022-03-07T17:11:04.429Z"
   },
   {
    "duration": 294,
    "start_time": "2022-03-07T17:11:13.205Z"
   },
   {
    "duration": 296,
    "start_time": "2022-03-07T17:11:17.584Z"
   },
   {
    "duration": 286,
    "start_time": "2022-03-07T17:13:19.966Z"
   },
   {
    "duration": 530,
    "start_time": "2022-03-07T17:13:30.456Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-07T17:13:43.411Z"
   },
   {
    "duration": 488,
    "start_time": "2022-03-07T17:13:49.409Z"
   },
   {
    "duration": 337,
    "start_time": "2022-03-07T18:12:44.820Z"
   },
   {
    "duration": 300,
    "start_time": "2022-03-07T18:15:08.003Z"
   },
   {
    "duration": 295,
    "start_time": "2022-03-07T18:15:14.201Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-07T18:15:22.256Z"
   },
   {
    "duration": 317,
    "start_time": "2022-03-07T18:16:18.802Z"
   },
   {
    "duration": 306,
    "start_time": "2022-03-07T20:06:37.922Z"
   },
   {
    "duration": 293,
    "start_time": "2022-03-07T20:24:29.542Z"
   },
   {
    "duration": 306,
    "start_time": "2022-03-08T01:41:30.954Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T01:41:35.659Z"
   },
   {
    "duration": 241,
    "start_time": "2022-03-08T01:41:50.356Z"
   },
   {
    "duration": 265,
    "start_time": "2022-03-08T01:43:56.365Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T16:05:15.249Z"
   },
   {
    "duration": 2,
    "start_time": "2022-03-08T16:06:36.778Z"
   },
   {
    "duration": 223,
    "start_time": "2022-03-08T16:07:00.454Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T16:33:23.174Z"
   },
   {
    "duration": 61,
    "start_time": "2022-03-08T16:33:32.523Z"
   },
   {
    "duration": 62,
    "start_time": "2022-03-08T16:33:44.372Z"
   },
   {
    "duration": 58,
    "start_time": "2022-03-08T16:33:54.203Z"
   },
   {
    "duration": 81,
    "start_time": "2022-03-08T16:34:03.780Z"
   },
   {
    "duration": 183,
    "start_time": "2022-03-08T16:36:34.052Z"
   },
   {
    "duration": 175,
    "start_time": "2022-03-08T16:49:13.241Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T16:54:08.764Z"
   },
   {
    "duration": 196,
    "start_time": "2022-03-08T16:54:55.730Z"
   },
   {
    "duration": 579,
    "start_time": "2022-03-08T16:55:08.394Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T16:55:08.975Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-08T16:55:08.984Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-08T16:55:09.011Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T16:55:09.024Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T16:55:09.032Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-08T16:55:09.043Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-08T16:55:09.060Z"
   },
   {
    "duration": 236,
    "start_time": "2022-03-08T16:55:09.073Z"
   },
   {
    "duration": -469,
    "start_time": "2022-03-08T16:55:09.782Z"
   },
   {
    "duration": -472,
    "start_time": "2022-03-08T16:55:09.786Z"
   },
   {
    "duration": -475,
    "start_time": "2022-03-08T16:55:09.790Z"
   },
   {
    "duration": -478,
    "start_time": "2022-03-08T16:55:09.794Z"
   },
   {
    "duration": -482,
    "start_time": "2022-03-08T16:55:09.799Z"
   },
   {
    "duration": -485,
    "start_time": "2022-03-08T16:55:09.803Z"
   },
   {
    "duration": -487,
    "start_time": "2022-03-08T16:55:09.806Z"
   },
   {
    "duration": -490,
    "start_time": "2022-03-08T16:55:09.810Z"
   },
   {
    "duration": -493,
    "start_time": "2022-03-08T16:55:09.814Z"
   },
   {
    "duration": -496,
    "start_time": "2022-03-08T16:55:09.818Z"
   },
   {
    "duration": -498,
    "start_time": "2022-03-08T16:55:09.821Z"
   },
   {
    "duration": -500,
    "start_time": "2022-03-08T16:55:09.825Z"
   },
   {
    "duration": -503,
    "start_time": "2022-03-08T16:55:09.829Z"
   },
   {
    "duration": -505,
    "start_time": "2022-03-08T16:55:09.832Z"
   },
   {
    "duration": -508,
    "start_time": "2022-03-08T16:55:09.836Z"
   },
   {
    "duration": -510,
    "start_time": "2022-03-08T16:55:09.839Z"
   },
   {
    "duration": -513,
    "start_time": "2022-03-08T16:55:09.843Z"
   },
   {
    "duration": -516,
    "start_time": "2022-03-08T16:55:09.847Z"
   },
   {
    "duration": -518,
    "start_time": "2022-03-08T16:55:09.850Z"
   },
   {
    "duration": -521,
    "start_time": "2022-03-08T16:55:09.854Z"
   },
   {
    "duration": -523,
    "start_time": "2022-03-08T16:55:09.857Z"
   },
   {
    "duration": -526,
    "start_time": "2022-03-08T16:55:09.861Z"
   },
   {
    "duration": -528,
    "start_time": "2022-03-08T16:55:09.865Z"
   },
   {
    "duration": -531,
    "start_time": "2022-03-08T16:55:09.869Z"
   },
   {
    "duration": -534,
    "start_time": "2022-03-08T16:55:09.873Z"
   },
   {
    "duration": -536,
    "start_time": "2022-03-08T16:55:09.876Z"
   },
   {
    "duration": -545,
    "start_time": "2022-03-08T16:55:09.886Z"
   },
   {
    "duration": -549,
    "start_time": "2022-03-08T16:55:09.891Z"
   },
   {
    "duration": -551,
    "start_time": "2022-03-08T16:55:09.894Z"
   },
   {
    "duration": -554,
    "start_time": "2022-03-08T16:55:09.898Z"
   },
   {
    "duration": -557,
    "start_time": "2022-03-08T16:55:09.902Z"
   },
   {
    "duration": -560,
    "start_time": "2022-03-08T16:55:09.906Z"
   },
   {
    "duration": -563,
    "start_time": "2022-03-08T16:55:09.910Z"
   },
   {
    "duration": -566,
    "start_time": "2022-03-08T16:55:09.914Z"
   },
   {
    "duration": -568,
    "start_time": "2022-03-08T16:55:09.917Z"
   },
   {
    "duration": -570,
    "start_time": "2022-03-08T16:55:09.921Z"
   },
   {
    "duration": -573,
    "start_time": "2022-03-08T16:55:09.925Z"
   },
   {
    "duration": -576,
    "start_time": "2022-03-08T16:55:09.929Z"
   },
   {
    "duration": -579,
    "start_time": "2022-03-08T16:55:09.933Z"
   },
   {
    "duration": -732,
    "start_time": "2022-03-08T16:55:10.087Z"
   },
   {
    "duration": -880,
    "start_time": "2022-03-08T16:55:10.236Z"
   },
   {
    "duration": -1008,
    "start_time": "2022-03-08T16:55:10.365Z"
   },
   {
    "duration": -1020,
    "start_time": "2022-03-08T16:55:10.378Z"
   },
   {
    "duration": -1031,
    "start_time": "2022-03-08T16:55:10.390Z"
   },
   {
    "duration": -1035,
    "start_time": "2022-03-08T16:55:10.395Z"
   },
   {
    "duration": -1038,
    "start_time": "2022-03-08T16:55:10.399Z"
   },
   {
    "duration": -1042,
    "start_time": "2022-03-08T16:55:10.404Z"
   },
   {
    "duration": -1045,
    "start_time": "2022-03-08T16:55:10.408Z"
   },
   {
    "duration": -1085,
    "start_time": "2022-03-08T16:55:10.449Z"
   },
   {
    "duration": -1106,
    "start_time": "2022-03-08T16:55:10.471Z"
   },
   {
    "duration": -1108,
    "start_time": "2022-03-08T16:55:10.474Z"
   },
   {
    "duration": -1110,
    "start_time": "2022-03-08T16:55:10.477Z"
   },
   {
    "duration": -1112,
    "start_time": "2022-03-08T16:55:10.480Z"
   },
   {
    "duration": -1125,
    "start_time": "2022-03-08T16:55:10.494Z"
   },
   {
    "duration": -1127,
    "start_time": "2022-03-08T16:55:10.497Z"
   },
   {
    "duration": -1128,
    "start_time": "2022-03-08T16:55:10.500Z"
   },
   {
    "duration": -1140,
    "start_time": "2022-03-08T16:55:10.513Z"
   },
   {
    "duration": -1142,
    "start_time": "2022-03-08T16:55:10.516Z"
   },
   {
    "duration": -1144,
    "start_time": "2022-03-08T16:55:10.519Z"
   },
   {
    "duration": -1146,
    "start_time": "2022-03-08T16:55:10.522Z"
   },
   {
    "duration": -1148,
    "start_time": "2022-03-08T16:55:10.525Z"
   },
   {
    "duration": -1151,
    "start_time": "2022-03-08T16:55:10.528Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T16:55:26.904Z"
   },
   {
    "duration": 63,
    "start_time": "2022-03-08T16:56:47.878Z"
   },
   {
    "duration": 67,
    "start_time": "2022-03-08T16:57:05.909Z"
   },
   {
    "duration": 651,
    "start_time": "2022-03-08T17:03:44.329Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:03:44.982Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-08T17:03:44.991Z"
   },
   {
    "duration": 43,
    "start_time": "2022-03-08T17:03:45.006Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:03:45.051Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-08T17:03:45.059Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-08T17:03:45.075Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-08T17:03:45.106Z"
   },
   {
    "duration": 288,
    "start_time": "2022-03-08T17:03:45.138Z"
   },
   {
    "duration": -159,
    "start_time": "2022-03-08T17:03:45.589Z"
   },
   {
    "duration": -163,
    "start_time": "2022-03-08T17:03:45.594Z"
   },
   {
    "duration": -165,
    "start_time": "2022-03-08T17:03:45.597Z"
   },
   {
    "duration": -168,
    "start_time": "2022-03-08T17:03:45.601Z"
   },
   {
    "duration": -170,
    "start_time": "2022-03-08T17:03:45.604Z"
   },
   {
    "duration": -173,
    "start_time": "2022-03-08T17:03:45.608Z"
   },
   {
    "duration": -174,
    "start_time": "2022-03-08T17:03:45.611Z"
   },
   {
    "duration": -177,
    "start_time": "2022-03-08T17:03:45.615Z"
   },
   {
    "duration": -180,
    "start_time": "2022-03-08T17:03:45.619Z"
   },
   {
    "duration": -184,
    "start_time": "2022-03-08T17:03:45.624Z"
   },
   {
    "duration": -186,
    "start_time": "2022-03-08T17:03:45.628Z"
   },
   {
    "duration": -188,
    "start_time": "2022-03-08T17:03:45.631Z"
   },
   {
    "duration": -193,
    "start_time": "2022-03-08T17:03:45.637Z"
   },
   {
    "duration": -197,
    "start_time": "2022-03-08T17:03:45.642Z"
   },
   {
    "duration": -199,
    "start_time": "2022-03-08T17:03:45.645Z"
   },
   {
    "duration": -201,
    "start_time": "2022-03-08T17:03:45.648Z"
   },
   {
    "duration": -205,
    "start_time": "2022-03-08T17:03:45.653Z"
   },
   {
    "duration": -209,
    "start_time": "2022-03-08T17:03:45.659Z"
   },
   {
    "duration": -212,
    "start_time": "2022-03-08T17:03:45.663Z"
   },
   {
    "duration": -400,
    "start_time": "2022-03-08T17:03:45.852Z"
   },
   {
    "duration": -737,
    "start_time": "2022-03-08T17:03:46.190Z"
   },
   {
    "duration": -740,
    "start_time": "2022-03-08T17:03:46.194Z"
   },
   {
    "duration": -747,
    "start_time": "2022-03-08T17:03:46.202Z"
   },
   {
    "duration": -751,
    "start_time": "2022-03-08T17:03:46.207Z"
   },
   {
    "duration": -754,
    "start_time": "2022-03-08T17:03:46.210Z"
   },
   {
    "duration": -758,
    "start_time": "2022-03-08T17:03:46.216Z"
   },
   {
    "duration": -760,
    "start_time": "2022-03-08T17:03:46.219Z"
   },
   {
    "duration": -764,
    "start_time": "2022-03-08T17:03:46.223Z"
   },
   {
    "duration": -766,
    "start_time": "2022-03-08T17:03:46.227Z"
   },
   {
    "duration": -768,
    "start_time": "2022-03-08T17:03:46.230Z"
   },
   {
    "duration": -771,
    "start_time": "2022-03-08T17:03:46.234Z"
   },
   {
    "duration": -774,
    "start_time": "2022-03-08T17:03:46.238Z"
   },
   {
    "duration": -777,
    "start_time": "2022-03-08T17:03:46.242Z"
   },
   {
    "duration": -780,
    "start_time": "2022-03-08T17:03:46.246Z"
   },
   {
    "duration": -782,
    "start_time": "2022-03-08T17:03:46.249Z"
   },
   {
    "duration": -785,
    "start_time": "2022-03-08T17:03:46.253Z"
   },
   {
    "duration": -793,
    "start_time": "2022-03-08T17:03:46.263Z"
   },
   {
    "duration": -796,
    "start_time": "2022-03-08T17:03:46.267Z"
   },
   {
    "duration": -799,
    "start_time": "2022-03-08T17:03:46.271Z"
   },
   {
    "duration": -802,
    "start_time": "2022-03-08T17:03:46.275Z"
   },
   {
    "duration": -804,
    "start_time": "2022-03-08T17:03:46.278Z"
   },
   {
    "duration": -808,
    "start_time": "2022-03-08T17:03:46.283Z"
   },
   {
    "duration": -811,
    "start_time": "2022-03-08T17:03:46.287Z"
   },
   {
    "duration": -813,
    "start_time": "2022-03-08T17:03:46.290Z"
   },
   {
    "duration": -817,
    "start_time": "2022-03-08T17:03:46.296Z"
   },
   {
    "duration": -822,
    "start_time": "2022-03-08T17:03:46.302Z"
   },
   {
    "duration": -769,
    "start_time": "2022-03-08T17:03:46.306Z"
   },
   {
    "duration": -771,
    "start_time": "2022-03-08T17:03:46.310Z"
   },
   {
    "duration": -776,
    "start_time": "2022-03-08T17:03:46.316Z"
   },
   {
    "duration": -779,
    "start_time": "2022-03-08T17:03:46.320Z"
   },
   {
    "duration": -786,
    "start_time": "2022-03-08T17:03:46.328Z"
   },
   {
    "duration": -789,
    "start_time": "2022-03-08T17:03:46.332Z"
   },
   {
    "duration": -793,
    "start_time": "2022-03-08T17:03:46.337Z"
   },
   {
    "duration": -796,
    "start_time": "2022-03-08T17:03:46.341Z"
   },
   {
    "duration": -800,
    "start_time": "2022-03-08T17:03:46.345Z"
   },
   {
    "duration": -804,
    "start_time": "2022-03-08T17:03:46.350Z"
   },
   {
    "duration": -809,
    "start_time": "2022-03-08T17:03:46.356Z"
   },
   {
    "duration": -812,
    "start_time": "2022-03-08T17:03:46.360Z"
   },
   {
    "duration": -825,
    "start_time": "2022-03-08T17:03:46.374Z"
   },
   {
    "duration": -833,
    "start_time": "2022-03-08T17:03:46.383Z"
   },
   {
    "duration": -836,
    "start_time": "2022-03-08T17:03:46.387Z"
   },
   {
    "duration": -847,
    "start_time": "2022-03-08T17:03:46.399Z"
   },
   {
    "duration": 198,
    "start_time": "2022-03-08T17:04:06.681Z"
   },
   {
    "duration": 29,
    "start_time": "2022-03-08T17:05:25.721Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:05:38.301Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-08T17:05:41.907Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T17:05:46.137Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-08T17:05:49.890Z"
   },
   {
    "duration": 122,
    "start_time": "2022-03-08T17:05:52.772Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-08T17:05:53.595Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-08T17:05:54.657Z"
   },
   {
    "duration": 192,
    "start_time": "2022-03-08T17:05:55.276Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-08T17:05:55.505Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:05:55.972Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:05:56.571Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-08T17:05:56.783Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T17:05:57.224Z"
   },
   {
    "duration": 206,
    "start_time": "2022-03-08T17:05:57.447Z"
   },
   {
    "duration": 196,
    "start_time": "2022-03-08T17:05:57.738Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:05:58.119Z"
   },
   {
    "duration": 183,
    "start_time": "2022-03-08T17:05:58.352Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:05:58.572Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:05:59.095Z"
   },
   {
    "duration": 173,
    "start_time": "2022-03-08T17:05:59.361Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T17:05:59.624Z"
   },
   {
    "duration": 41,
    "start_time": "2022-03-08T17:06:00.052Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T17:06:00.328Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T17:06:00.570Z"
   },
   {
    "duration": 2,
    "start_time": "2022-03-08T17:06:00.829Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T17:06:01.896Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:06:02.603Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T17:06:02.886Z"
   },
   {
    "duration": 4611,
    "start_time": "2022-03-08T17:06:03.222Z"
   },
   {
    "duration": -309,
    "start_time": "2022-03-08T17:06:08.146Z"
   },
   {
    "duration": -312,
    "start_time": "2022-03-08T17:06:08.150Z"
   },
   {
    "duration": -319,
    "start_time": "2022-03-08T17:06:08.159Z"
   },
   {
    "duration": -325,
    "start_time": "2022-03-08T17:06:08.166Z"
   },
   {
    "duration": -329,
    "start_time": "2022-03-08T17:06:08.172Z"
   },
   {
    "duration": -335,
    "start_time": "2022-03-08T17:06:08.179Z"
   },
   {
    "duration": -339,
    "start_time": "2022-03-08T17:06:08.184Z"
   },
   {
    "duration": -343,
    "start_time": "2022-03-08T17:06:08.190Z"
   },
   {
    "duration": -346,
    "start_time": "2022-03-08T17:06:08.194Z"
   },
   {
    "duration": -352,
    "start_time": "2022-03-08T17:06:08.202Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-08T17:06:08.392Z"
   },
   {
    "duration": 223,
    "start_time": "2022-03-08T17:06:08.615Z"
   },
   {
    "duration": -143,
    "start_time": "2022-03-08T17:06:08.982Z"
   },
   {
    "duration": 203,
    "start_time": "2022-03-08T17:06:09.305Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T17:06:11.997Z"
   },
   {
    "duration": 570,
    "start_time": "2022-03-08T17:06:12.230Z"
   },
   {
    "duration": -312,
    "start_time": "2022-03-08T17:06:13.114Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-08T17:06:13.051Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-08T17:06:13.531Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-08T17:06:14.535Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-08T17:06:16.411Z"
   },
   {
    "duration": 239,
    "start_time": "2022-03-08T17:06:16.920Z"
   },
   {
    "duration": 184,
    "start_time": "2022-03-08T17:09:05.433Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:10:43.347Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:10:59.863Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:11:03.301Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:12:03.897Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:12:07.344Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:12:08.733Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:12:47.777Z"
   },
   {
    "duration": 49,
    "start_time": "2022-03-08T17:13:16.199Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:13:54.329Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:13:56.937Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T17:14:00.397Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:14:07.598Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T17:14:09.612Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:14:22.490Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:14:44.493Z"
   },
   {
    "duration": 193,
    "start_time": "2022-03-08T17:15:57.285Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-08T17:16:00.568Z"
   },
   {
    "duration": 188,
    "start_time": "2022-03-08T17:16:02.277Z"
   },
   {
    "duration": 200,
    "start_time": "2022-03-08T17:17:58.569Z"
   },
   {
    "duration": 59,
    "start_time": "2022-03-08T17:18:28.091Z"
   },
   {
    "duration": 94,
    "start_time": "2022-03-08T17:18:45.119Z"
   },
   {
    "duration": 55,
    "start_time": "2022-03-08T17:18:52.280Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-08T17:19:47.845Z"
   },
   {
    "duration": 214,
    "start_time": "2022-03-08T17:21:52.672Z"
   },
   {
    "duration": 191,
    "start_time": "2022-03-08T17:22:07.682Z"
   },
   {
    "duration": 186,
    "start_time": "2022-03-08T17:23:46.955Z"
   },
   {
    "duration": 171,
    "start_time": "2022-03-08T17:24:07.777Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-08T17:24:25.230Z"
   },
   {
    "duration": 4590,
    "start_time": "2022-03-08T17:25:11.419Z"
   },
   {
    "duration": 55,
    "start_time": "2022-03-08T17:25:19.732Z"
   },
   {
    "duration": 4756,
    "start_time": "2022-03-08T17:25:29.624Z"
   },
   {
    "duration": 710,
    "start_time": "2022-03-08T17:26:43.988Z"
   },
   {
    "duration": 858,
    "start_time": "2022-03-08T17:27:41.801Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-08T17:28:06.295Z"
   },
   {
    "duration": 4628,
    "start_time": "2022-03-08T17:28:19.054Z"
   },
   {
    "duration": 4382,
    "start_time": "2022-03-08T17:28:29.647Z"
   },
   {
    "duration": 4363,
    "start_time": "2022-03-08T17:28:39.908Z"
   },
   {
    "duration": 234,
    "start_time": "2022-03-08T17:29:01.858Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:29:09.315Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:29:40.849Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-08T17:30:07.271Z"
   },
   {
    "duration": 178,
    "start_time": "2022-03-08T17:31:36.184Z"
   },
   {
    "duration": 87,
    "start_time": "2022-03-08T17:32:54.588Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:33:11.056Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:33:35.550Z"
   },
   {
    "duration": 58,
    "start_time": "2022-03-08T17:34:21.613Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T17:34:35.475Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T17:35:01.669Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-08T17:35:13.796Z"
   },
   {
    "duration": 123,
    "start_time": "2022-03-08T17:36:20.372Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T17:36:25.376Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:36:58.759Z"
   },
   {
    "duration": 62,
    "start_time": "2022-03-08T17:37:55.048Z"
   },
   {
    "duration": 52,
    "start_time": "2022-03-08T17:38:09.670Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:40:06.690Z"
   },
   {
    "duration": 64,
    "start_time": "2022-03-08T17:41:51.462Z"
   },
   {
    "duration": 64,
    "start_time": "2022-03-08T17:42:50.353Z"
   },
   {
    "duration": 55,
    "start_time": "2022-03-08T17:43:29.337Z"
   },
   {
    "duration": 63,
    "start_time": "2022-03-08T17:44:04.159Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:44:18.107Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:46:03.172Z"
   },
   {
    "duration": 60,
    "start_time": "2022-03-08T17:48:01.315Z"
   },
   {
    "duration": 19492,
    "start_time": "2022-03-08T17:48:06.233Z"
   },
   {
    "duration": 181,
    "start_time": "2022-03-08T17:48:52.081Z"
   },
   {
    "duration": 181,
    "start_time": "2022-03-08T17:48:59.438Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:49:18.654Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:49:21.793Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-08T17:49:22.944Z"
   },
   {
    "duration": 176,
    "start_time": "2022-03-08T17:49:24.521Z"
   },
   {
    "duration": 67,
    "start_time": "2022-03-08T17:50:57.897Z"
   },
   {
    "duration": 271,
    "start_time": "2022-03-08T17:51:02.530Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:52:30.496Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-08T17:52:33.408Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:52:33.862Z"
   },
   {
    "duration": 198,
    "start_time": "2022-03-08T17:52:34.969Z"
   },
   {
    "duration": 57,
    "start_time": "2022-03-08T17:56:22.676Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T17:57:17.181Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:57:20.144Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T17:57:21.259Z"
   },
   {
    "duration": 205,
    "start_time": "2022-03-08T17:57:22.648Z"
   },
   {
    "duration": 212,
    "start_time": "2022-03-08T17:57:39.042Z"
   },
   {
    "duration": 359,
    "start_time": "2022-03-08T18:00:44.059Z"
   },
   {
    "duration": 60,
    "start_time": "2022-03-08T18:06:59.839Z"
   },
   {
    "duration": 4323,
    "start_time": "2022-03-08T18:07:40.065Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-08T18:07:59.669Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T18:08:28.261Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-08T18:11:40.306Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-08T18:11:48.962Z"
   },
   {
    "duration": 61,
    "start_time": "2022-03-08T18:13:46.962Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-08T18:14:05.106Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-08T18:14:40.099Z"
   },
   {
    "duration": 63,
    "start_time": "2022-03-08T18:15:31.812Z"
   },
   {
    "duration": 198,
    "start_time": "2022-03-08T18:15:39.887Z"
   },
   {
    "duration": 183,
    "start_time": "2022-03-08T18:16:51.767Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-08T18:17:19.284Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-08T18:19:03.785Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-08T18:19:39.233Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T18:19:53.359Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-08T18:20:34.661Z"
   },
   {
    "duration": 191,
    "start_time": "2022-03-08T18:21:07.639Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-08T18:21:23.252Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-08T18:21:43.393Z"
   },
   {
    "duration": 205,
    "start_time": "2022-03-08T18:22:44.379Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-08T18:22:57.611Z"
   },
   {
    "duration": 184,
    "start_time": "2022-03-08T18:23:08.045Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-08T18:23:56.313Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-08T18:25:34.437Z"
   },
   {
    "duration": 231,
    "start_time": "2022-03-11T17:15:37.420Z"
   },
   {
    "duration": 593,
    "start_time": "2022-03-11T17:15:48.098Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-11T17:15:48.693Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-11T17:15:48.701Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-11T17:15:48.722Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-11T17:15:48.734Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-11T17:15:48.739Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-11T17:15:48.749Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-11T17:15:48.758Z"
   },
   {
    "duration": 262,
    "start_time": "2022-03-11T17:15:48.768Z"
   },
   {
    "duration": 255,
    "start_time": "2022-03-11T17:15:48.778Z"
   },
   {
    "duration": 249,
    "start_time": "2022-03-11T17:15:48.785Z"
   },
   {
    "duration": 246,
    "start_time": "2022-03-11T17:15:48.789Z"
   },
   {
    "duration": 243,
    "start_time": "2022-03-11T17:15:48.793Z"
   },
   {
    "duration": 239,
    "start_time": "2022-03-11T17:15:48.798Z"
   },
   {
    "duration": 236,
    "start_time": "2022-03-11T17:15:48.802Z"
   },
   {
    "duration": 232,
    "start_time": "2022-03-11T17:15:48.806Z"
   },
   {
    "duration": 229,
    "start_time": "2022-03-11T17:15:48.810Z"
   },
   {
    "duration": 226,
    "start_time": "2022-03-11T17:15:48.814Z"
   },
   {
    "duration": 223,
    "start_time": "2022-03-11T17:15:48.818Z"
   },
   {
    "duration": 218,
    "start_time": "2022-03-11T17:15:48.824Z"
   },
   {
    "duration": 200,
    "start_time": "2022-03-11T17:15:48.843Z"
   },
   {
    "duration": 195,
    "start_time": "2022-03-11T17:15:48.849Z"
   },
   {
    "duration": 190,
    "start_time": "2022-03-11T17:15:48.855Z"
   },
   {
    "duration": 187,
    "start_time": "2022-03-11T17:15:48.859Z"
   },
   {
    "duration": 183,
    "start_time": "2022-03-11T17:15:48.864Z"
   },
   {
    "duration": 179,
    "start_time": "2022-03-11T17:15:48.869Z"
   },
   {
    "duration": 174,
    "start_time": "2022-03-11T17:15:48.874Z"
   },
   {
    "duration": 170,
    "start_time": "2022-03-11T17:15:48.879Z"
   },
   {
    "duration": 166,
    "start_time": "2022-03-11T17:15:48.884Z"
   },
   {
    "duration": 162,
    "start_time": "2022-03-11T17:15:48.889Z"
   },
   {
    "duration": 158,
    "start_time": "2022-03-11T17:15:48.894Z"
   },
   {
    "duration": 154,
    "start_time": "2022-03-11T17:15:48.899Z"
   },
   {
    "duration": 147,
    "start_time": "2022-03-11T17:15:48.906Z"
   },
   {
    "duration": 145,
    "start_time": "2022-03-11T17:15:48.909Z"
   },
   {
    "duration": 140,
    "start_time": "2022-03-11T17:15:48.915Z"
   },
   {
    "duration": 136,
    "start_time": "2022-03-11T17:15:48.920Z"
   },
   {
    "duration": 132,
    "start_time": "2022-03-11T17:15:48.925Z"
   },
   {
    "duration": 129,
    "start_time": "2022-03-11T17:15:48.929Z"
   },
   {
    "duration": 123,
    "start_time": "2022-03-11T17:15:48.935Z"
   },
   {
    "duration": 119,
    "start_time": "2022-03-11T17:15:48.940Z"
   },
   {
    "duration": 115,
    "start_time": "2022-03-11T17:15:48.945Z"
   },
   {
    "duration": 112,
    "start_time": "2022-03-11T17:15:48.949Z"
   },
   {
    "duration": 108,
    "start_time": "2022-03-11T17:15:48.954Z"
   },
   {
    "duration": 105,
    "start_time": "2022-03-11T17:15:48.957Z"
   },
   {
    "duration": 101,
    "start_time": "2022-03-11T17:15:48.962Z"
   },
   {
    "duration": 99,
    "start_time": "2022-03-11T17:15:48.965Z"
   },
   {
    "duration": 95,
    "start_time": "2022-03-11T17:15:48.969Z"
   },
   {
    "duration": -446,
    "start_time": "2022-03-11T17:15:49.511Z"
   },
   {
    "duration": -510,
    "start_time": "2022-03-11T17:15:49.576Z"
   },
   {
    "duration": -512,
    "start_time": "2022-03-11T17:15:49.579Z"
   },
   {
    "duration": -516,
    "start_time": "2022-03-11T17:15:49.584Z"
   },
   {
    "duration": -518,
    "start_time": "2022-03-11T17:15:49.587Z"
   },
   {
    "duration": -523,
    "start_time": "2022-03-11T17:15:49.592Z"
   },
   {
    "duration": -525,
    "start_time": "2022-03-11T17:15:49.595Z"
   },
   {
    "duration": -529,
    "start_time": "2022-03-11T17:15:49.600Z"
   },
   {
    "duration": -472,
    "start_time": "2022-03-11T17:15:49.604Z"
   },
   {
    "duration": -474,
    "start_time": "2022-03-11T17:15:49.608Z"
   },
   {
    "duration": -477,
    "start_time": "2022-03-11T17:15:49.611Z"
   },
   {
    "duration": -480,
    "start_time": "2022-03-11T17:15:49.615Z"
   },
   {
    "duration": -483,
    "start_time": "2022-03-11T17:15:49.619Z"
   },
   {
    "duration": -487,
    "start_time": "2022-03-11T17:15:49.624Z"
   },
   {
    "duration": -489,
    "start_time": "2022-03-11T17:15:49.627Z"
   },
   {
    "duration": -492,
    "start_time": "2022-03-11T17:15:49.631Z"
   },
   {
    "duration": -495,
    "start_time": "2022-03-11T17:15:49.635Z"
   },
   {
    "duration": -499,
    "start_time": "2022-03-11T17:15:49.640Z"
   },
   {
    "duration": -500,
    "start_time": "2022-03-11T17:15:49.643Z"
   },
   {
    "duration": -503,
    "start_time": "2022-03-11T17:15:49.647Z"
   },
   {
    "duration": -506,
    "start_time": "2022-03-11T17:15:49.651Z"
   },
   {
    "duration": -510,
    "start_time": "2022-03-11T17:15:49.656Z"
   },
   {
    "duration": -512,
    "start_time": "2022-03-11T17:15:49.659Z"
   },
   {
    "duration": -515,
    "start_time": "2022-03-11T17:15:49.663Z"
   },
   {
    "duration": -518,
    "start_time": "2022-03-11T17:15:49.667Z"
   },
   {
    "duration": -522,
    "start_time": "2022-03-11T17:15:49.671Z"
   },
   {
    "duration": -525,
    "start_time": "2022-03-11T17:15:49.675Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-11T17:16:06.516Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-11T17:16:43.797Z"
   },
   {
    "duration": 179,
    "start_time": "2022-03-11T17:17:57.605Z"
   },
   {
    "duration": 166,
    "start_time": "2022-03-11T17:18:20.134Z"
   },
   {
    "duration": 172,
    "start_time": "2022-03-11T17:18:40.432Z"
   },
   {
    "duration": 167,
    "start_time": "2022-03-11T17:18:45.263Z"
   },
   {
    "duration": 4510,
    "start_time": "2022-03-11T17:18:51.538Z"
   },
   {
    "duration": 4387,
    "start_time": "2022-03-11T17:19:13.198Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-11T17:19:26.530Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-11T17:20:12.751Z"
   },
   {
    "duration": 159,
    "start_time": "2022-03-11T17:25:28.598Z"
   },
   {
    "duration": 174,
    "start_time": "2022-03-11T17:25:39.928Z"
   },
   {
    "duration": 178,
    "start_time": "2022-03-11T17:25:49.349Z"
   },
   {
    "duration": 177,
    "start_time": "2022-03-11T17:25:53.279Z"
   },
   {
    "duration": 175,
    "start_time": "2022-03-11T17:25:56.945Z"
   },
   {
    "duration": 169,
    "start_time": "2022-03-11T17:26:04.547Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-11T17:32:53.810Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-11T17:33:01.746Z"
   },
   {
    "duration": 4263,
    "start_time": "2022-03-11T17:33:37.640Z"
   },
   {
    "duration": 4275,
    "start_time": "2022-03-11T17:33:46.766Z"
   },
   {
    "duration": 183,
    "start_time": "2022-03-11T17:34:01.684Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-11T17:34:29.277Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-11T17:34:37.580Z"
   },
   {
    "duration": 314,
    "start_time": "2022-03-11T17:35:14.678Z"
   },
   {
    "duration": 4306,
    "start_time": "2022-03-11T17:35:24.655Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-11T17:35:47.940Z"
   },
   {
    "duration": 57,
    "start_time": "2022-03-11T17:39:37.926Z"
   },
   {
    "duration": 177,
    "start_time": "2022-03-11T17:39:42.906Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-11T17:40:54.007Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-11T17:41:47.207Z"
   },
   {
    "duration": 27,
    "start_time": "2022-03-11T17:42:21.002Z"
   },
   {
    "duration": 185,
    "start_time": "2022-03-11T17:45:14.422Z"
   },
   {
    "duration": 179,
    "start_time": "2022-03-11T17:45:22.846Z"
   },
   {
    "duration": 60,
    "start_time": "2022-03-11T17:45:55.032Z"
   },
   {
    "duration": 175,
    "start_time": "2022-03-11T17:45:59.396Z"
   },
   {
    "duration": 217,
    "start_time": "2022-03-11T17:46:58.070Z"
   },
   {
    "duration": 171,
    "start_time": "2022-03-11T17:47:05.002Z"
   },
   {
    "duration": 561,
    "start_time": "2022-03-11T17:47:18.591Z"
   },
   {
    "duration": 4549,
    "start_time": "2022-03-11T17:47:19.154Z"
   },
   {
    "duration": -166,
    "start_time": "2022-03-11T17:47:23.873Z"
   },
   {
    "duration": -169,
    "start_time": "2022-03-11T17:47:23.877Z"
   },
   {
    "duration": -185,
    "start_time": "2022-03-11T17:47:23.894Z"
   },
   {
    "duration": -200,
    "start_time": "2022-03-11T17:47:23.910Z"
   },
   {
    "duration": -211,
    "start_time": "2022-03-11T17:47:23.922Z"
   },
   {
    "duration": -467,
    "start_time": "2022-03-11T17:47:24.178Z"
   },
   {
    "duration": -477,
    "start_time": "2022-03-11T17:47:24.189Z"
   },
   {
    "duration": -479,
    "start_time": "2022-03-11T17:47:24.192Z"
   },
   {
    "duration": -488,
    "start_time": "2022-03-11T17:47:24.202Z"
   },
   {
    "duration": -491,
    "start_time": "2022-03-11T17:47:24.206Z"
   },
   {
    "duration": -494,
    "start_time": "2022-03-11T17:47:24.210Z"
   },
   {
    "duration": -505,
    "start_time": "2022-03-11T17:47:24.222Z"
   },
   {
    "duration": -509,
    "start_time": "2022-03-11T17:47:24.227Z"
   },
   {
    "duration": -521,
    "start_time": "2022-03-11T17:47:24.239Z"
   },
   {
    "duration": -524,
    "start_time": "2022-03-11T17:47:24.243Z"
   },
   {
    "duration": -527,
    "start_time": "2022-03-11T17:47:24.247Z"
   },
   {
    "duration": -531,
    "start_time": "2022-03-11T17:47:24.252Z"
   },
   {
    "duration": -533,
    "start_time": "2022-03-11T17:47:24.255Z"
   },
   {
    "duration": -776,
    "start_time": "2022-03-11T17:47:24.499Z"
   },
   {
    "duration": -784,
    "start_time": "2022-03-11T17:47:24.508Z"
   },
   {
    "duration": -787,
    "start_time": "2022-03-11T17:47:24.512Z"
   },
   {
    "duration": -789,
    "start_time": "2022-03-11T17:47:24.515Z"
   },
   {
    "duration": -793,
    "start_time": "2022-03-11T17:47:24.519Z"
   },
   {
    "duration": -796,
    "start_time": "2022-03-11T17:47:24.523Z"
   },
   {
    "duration": -799,
    "start_time": "2022-03-11T17:47:24.527Z"
   },
   {
    "duration": -801,
    "start_time": "2022-03-11T17:47:24.530Z"
   },
   {
    "duration": -803,
    "start_time": "2022-03-11T17:47:24.533Z"
   },
   {
    "duration": -806,
    "start_time": "2022-03-11T17:47:24.537Z"
   },
   {
    "duration": -808,
    "start_time": "2022-03-11T17:47:24.540Z"
   },
   {
    "duration": -811,
    "start_time": "2022-03-11T17:47:24.544Z"
   },
   {
    "duration": -813,
    "start_time": "2022-03-11T17:47:24.547Z"
   },
   {
    "duration": -815,
    "start_time": "2022-03-11T17:47:24.550Z"
   },
   {
    "duration": -1057,
    "start_time": "2022-03-11T17:47:24.792Z"
   },
   {
    "duration": -1060,
    "start_time": "2022-03-11T17:47:24.796Z"
   },
   {
    "duration": -1062,
    "start_time": "2022-03-11T17:47:24.800Z"
   },
   {
    "duration": -1066,
    "start_time": "2022-03-11T17:47:24.804Z"
   },
   {
    "duration": -1069,
    "start_time": "2022-03-11T17:47:24.808Z"
   },
   {
    "duration": -1072,
    "start_time": "2022-03-11T17:47:24.812Z"
   },
   {
    "duration": -1074,
    "start_time": "2022-03-11T17:47:24.815Z"
   },
   {
    "duration": -1077,
    "start_time": "2022-03-11T17:47:24.819Z"
   },
   {
    "duration": -1080,
    "start_time": "2022-03-11T17:47:24.823Z"
   },
   {
    "duration": -1082,
    "start_time": "2022-03-11T17:47:24.826Z"
   },
   {
    "duration": -1085,
    "start_time": "2022-03-11T17:47:24.830Z"
   },
   {
    "duration": -1087,
    "start_time": "2022-03-11T17:47:24.833Z"
   },
   {
    "duration": -1090,
    "start_time": "2022-03-11T17:47:24.837Z"
   },
   {
    "duration": -1339,
    "start_time": "2022-03-11T17:47:25.087Z"
   },
   {
    "duration": -1342,
    "start_time": "2022-03-11T17:47:25.091Z"
   },
   {
    "duration": -1346,
    "start_time": "2022-03-11T17:47:25.096Z"
   },
   {
    "duration": -1351,
    "start_time": "2022-03-11T17:47:25.102Z"
   },
   {
    "duration": -1354,
    "start_time": "2022-03-11T17:47:25.106Z"
   },
   {
    "duration": -1358,
    "start_time": "2022-03-11T17:47:25.111Z"
   },
   {
    "duration": -1361,
    "start_time": "2022-03-11T17:47:25.115Z"
   },
   {
    "duration": -1364,
    "start_time": "2022-03-11T17:47:25.119Z"
   },
   {
    "duration": -1368,
    "start_time": "2022-03-11T17:47:25.124Z"
   },
   {
    "duration": -1371,
    "start_time": "2022-03-11T17:47:25.128Z"
   },
   {
    "duration": -1376,
    "start_time": "2022-03-11T17:47:25.134Z"
   },
   {
    "duration": -1379,
    "start_time": "2022-03-11T17:47:25.138Z"
   },
   {
    "duration": -1383,
    "start_time": "2022-03-11T17:47:25.143Z"
   },
   {
    "duration": -1386,
    "start_time": "2022-03-11T17:47:25.147Z"
   },
   {
    "duration": -1390,
    "start_time": "2022-03-11T17:47:25.152Z"
   },
   {
    "duration": -1632,
    "start_time": "2022-03-11T17:47:25.394Z"
   },
   {
    "duration": -1647,
    "start_time": "2022-03-11T17:47:25.410Z"
   },
   {
    "duration": -1651,
    "start_time": "2022-03-11T17:47:25.415Z"
   },
   {
    "duration": -1654,
    "start_time": "2022-03-11T17:47:25.419Z"
   },
   {
    "duration": -1656,
    "start_time": "2022-03-11T17:47:25.422Z"
   },
   {
    "duration": -1660,
    "start_time": "2022-03-11T17:47:25.427Z"
   },
   {
    "duration": -1671,
    "start_time": "2022-03-11T17:47:25.439Z"
   },
   {
    "duration": -1676,
    "start_time": "2022-03-11T17:47:25.444Z"
   },
   {
    "duration": -1686,
    "start_time": "2022-03-11T17:47:25.455Z"
   },
   {
    "duration": -1690,
    "start_time": "2022-03-11T17:47:25.460Z"
   },
   {
    "duration": -1700,
    "start_time": "2022-03-11T17:47:25.471Z"
   },
   {
    "duration": -1704,
    "start_time": "2022-03-11T17:47:25.476Z"
   },
   {
    "duration": -1716,
    "start_time": "2022-03-11T17:47:25.489Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-11T18:03:08.639Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-11T18:03:37.591Z"
   },
   {
    "duration": 4121,
    "start_time": "2022-03-11T18:07:10.635Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-11T18:07:34.970Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-11T18:07:50.152Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-11T18:08:12.239Z"
   },
   {
    "duration": 172,
    "start_time": "2022-03-11T18:16:15.508Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-11T18:16:45.176Z"
   },
   {
    "duration": 2689,
    "start_time": "2022-03-11T18:23:43.358Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-11T18:26:28.303Z"
   },
   {
    "duration": 1144,
    "start_time": "2022-03-11T18:30:16.734Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-11T18:31:27.990Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-11T19:20:27.233Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-11T19:20:43.078Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-11T19:20:53.054Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-11T19:24:26.846Z"
   },
   {
    "duration": 171,
    "start_time": "2022-03-11T19:24:49.813Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-11T19:26:20.081Z"
   },
   {
    "duration": 58,
    "start_time": "2022-03-11T19:30:58.021Z"
   },
   {
    "duration": 2593,
    "start_time": "2022-03-11T19:33:14.980Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-11T19:35:06.078Z"
   },
   {
    "duration": 55,
    "start_time": "2022-03-11T19:35:39.498Z"
   },
   {
    "duration": 59,
    "start_time": "2022-03-11T19:36:10.879Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-11T19:37:03.272Z"
   },
   {
    "duration": 171,
    "start_time": "2022-03-11T19:43:39.052Z"
   },
   {
    "duration": 163,
    "start_time": "2022-03-11T19:43:44.160Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-11T20:34:30.681Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-11T23:50:30.198Z"
   },
   {
    "duration": 177,
    "start_time": "2022-03-11T23:50:56.488Z"
   },
   {
    "duration": 172,
    "start_time": "2022-03-12T00:05:41.851Z"
   },
   {
    "duration": 174,
    "start_time": "2022-03-12T00:05:56.906Z"
   },
   {
    "duration": 188,
    "start_time": "2022-03-12T00:06:13.009Z"
   },
   {
    "duration": 182,
    "start_time": "2022-03-12T00:06:29.319Z"
   },
   {
    "duration": 187,
    "start_time": "2022-03-12T00:06:36.696Z"
   },
   {
    "duration": 175,
    "start_time": "2022-03-12T00:06:44.853Z"
   },
   {
    "duration": 108,
    "start_time": "2022-03-12T00:14:03.902Z"
   },
   {
    "duration": 53,
    "start_time": "2022-03-12T00:14:08.945Z"
   },
   {
    "duration": 59,
    "start_time": "2022-03-12T00:14:25.245Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T00:14:47.612Z"
   },
   {
    "duration": 173,
    "start_time": "2022-03-12T00:25:36.327Z"
   },
   {
    "duration": 264,
    "start_time": "2022-03-12T21:10:14.697Z"
   },
   {
    "duration": 209,
    "start_time": "2022-03-12T21:10:26.290Z"
   },
   {
    "duration": 772,
    "start_time": "2022-03-12T21:10:36.872Z"
   },
   {
    "duration": 5293,
    "start_time": "2022-03-12T21:10:37.646Z"
   },
   {
    "duration": 934,
    "start_time": "2022-03-12T21:10:42.009Z"
   },
   {
    "duration": 928,
    "start_time": "2022-03-12T21:10:42.016Z"
   },
   {
    "duration": 914,
    "start_time": "2022-03-12T21:10:42.031Z"
   },
   {
    "duration": 899,
    "start_time": "2022-03-12T21:10:42.047Z"
   },
   {
    "duration": 885,
    "start_time": "2022-03-12T21:10:42.062Z"
   },
   {
    "duration": 873,
    "start_time": "2022-03-12T21:10:42.075Z"
   },
   {
    "duration": 866,
    "start_time": "2022-03-12T21:10:42.083Z"
   },
   {
    "duration": 854,
    "start_time": "2022-03-12T21:10:42.096Z"
   },
   {
    "duration": 848,
    "start_time": "2022-03-12T21:10:42.102Z"
   },
   {
    "duration": 844,
    "start_time": "2022-03-12T21:10:42.107Z"
   },
   {
    "duration": 815,
    "start_time": "2022-03-12T21:10:42.137Z"
   },
   {
    "duration": 812,
    "start_time": "2022-03-12T21:10:42.141Z"
   },
   {
    "duration": 807,
    "start_time": "2022-03-12T21:10:42.147Z"
   },
   {
    "duration": 790,
    "start_time": "2022-03-12T21:10:42.164Z"
   },
   {
    "duration": 775,
    "start_time": "2022-03-12T21:10:42.180Z"
   },
   {
    "duration": 751,
    "start_time": "2022-03-12T21:10:42.205Z"
   },
   {
    "duration": 745,
    "start_time": "2022-03-12T21:10:42.212Z"
   },
   {
    "duration": 734,
    "start_time": "2022-03-12T21:10:42.224Z"
   },
   {
    "duration": 307,
    "start_time": "2022-03-12T21:10:42.652Z"
   },
   {
    "duration": 305,
    "start_time": "2022-03-12T21:10:42.655Z"
   },
   {
    "duration": 301,
    "start_time": "2022-03-12T21:10:42.659Z"
   },
   {
    "duration": 298,
    "start_time": "2022-03-12T21:10:42.663Z"
   },
   {
    "duration": 294,
    "start_time": "2022-03-12T21:10:42.668Z"
   },
   {
    "duration": 291,
    "start_time": "2022-03-12T21:10:42.672Z"
   },
   {
    "duration": 287,
    "start_time": "2022-03-12T21:10:42.677Z"
   },
   {
    "duration": 285,
    "start_time": "2022-03-12T21:10:42.680Z"
   },
   {
    "duration": 280,
    "start_time": "2022-03-12T21:10:42.685Z"
   },
   {
    "duration": 278,
    "start_time": "2022-03-12T21:10:42.688Z"
   },
   {
    "duration": 275,
    "start_time": "2022-03-12T21:10:42.692Z"
   },
   {
    "duration": 272,
    "start_time": "2022-03-12T21:10:42.696Z"
   },
   {
    "duration": 267,
    "start_time": "2022-03-12T21:10:42.701Z"
   },
   {
    "duration": 265,
    "start_time": "2022-03-12T21:10:42.704Z"
   },
   {
    "duration": 262,
    "start_time": "2022-03-12T21:10:42.708Z"
   },
   {
    "duration": 260,
    "start_time": "2022-03-12T21:10:42.711Z"
   },
   {
    "duration": 256,
    "start_time": "2022-03-12T21:10:42.716Z"
   },
   {
    "duration": 252,
    "start_time": "2022-03-12T21:10:42.721Z"
   },
   {
    "duration": 248,
    "start_time": "2022-03-12T21:10:42.726Z"
   },
   {
    "duration": 245,
    "start_time": "2022-03-12T21:10:42.730Z"
   },
   {
    "duration": 241,
    "start_time": "2022-03-12T21:10:42.734Z"
   },
   {
    "duration": 238,
    "start_time": "2022-03-12T21:10:42.738Z"
   },
   {
    "duration": 235,
    "start_time": "2022-03-12T21:10:42.742Z"
   },
   {
    "duration": 231,
    "start_time": "2022-03-12T21:10:42.747Z"
   },
   {
    "duration": 228,
    "start_time": "2022-03-12T21:10:42.751Z"
   },
   {
    "duration": 224,
    "start_time": "2022-03-12T21:10:42.755Z"
   },
   {
    "duration": 220,
    "start_time": "2022-03-12T21:10:42.760Z"
   },
   {
    "duration": 216,
    "start_time": "2022-03-12T21:10:42.765Z"
   },
   {
    "duration": 213,
    "start_time": "2022-03-12T21:10:42.769Z"
   },
   {
    "duration": 210,
    "start_time": "2022-03-12T21:10:42.773Z"
   },
   {
    "duration": 206,
    "start_time": "2022-03-12T21:10:42.777Z"
   },
   {
    "duration": 202,
    "start_time": "2022-03-12T21:10:42.782Z"
   },
   {
    "duration": 199,
    "start_time": "2022-03-12T21:10:42.786Z"
   },
   {
    "duration": 197,
    "start_time": "2022-03-12T21:10:42.789Z"
   },
   {
    "duration": 194,
    "start_time": "2022-03-12T21:10:42.793Z"
   },
   {
    "duration": 189,
    "start_time": "2022-03-12T21:10:42.799Z"
   },
   {
    "duration": 185,
    "start_time": "2022-03-12T21:10:42.803Z"
   },
   {
    "duration": 183,
    "start_time": "2022-03-12T21:10:42.806Z"
   },
   {
    "duration": 179,
    "start_time": "2022-03-12T21:10:42.811Z"
   },
   {
    "duration": 176,
    "start_time": "2022-03-12T21:10:42.815Z"
   },
   {
    "duration": 173,
    "start_time": "2022-03-12T21:10:42.819Z"
   },
   {
    "duration": 169,
    "start_time": "2022-03-12T21:10:42.823Z"
   },
   {
    "duration": 165,
    "start_time": "2022-03-12T21:10:42.828Z"
   },
   {
    "duration": 162,
    "start_time": "2022-03-12T21:10:42.832Z"
   },
   {
    "duration": 159,
    "start_time": "2022-03-12T21:10:42.836Z"
   },
   {
    "duration": 156,
    "start_time": "2022-03-12T21:10:42.839Z"
   },
   {
    "duration": 153,
    "start_time": "2022-03-12T21:10:42.843Z"
   },
   {
    "duration": 150,
    "start_time": "2022-03-12T21:10:42.847Z"
   },
   {
    "duration": 146,
    "start_time": "2022-03-12T21:10:42.852Z"
   },
   {
    "duration": 144,
    "start_time": "2022-03-12T21:10:42.855Z"
   },
   {
    "duration": 140,
    "start_time": "2022-03-12T21:10:42.859Z"
   },
   {
    "duration": 137,
    "start_time": "2022-03-12T21:10:42.863Z"
   },
   {
    "duration": 133,
    "start_time": "2022-03-12T21:10:42.868Z"
   },
   {
    "duration": 130,
    "start_time": "2022-03-12T21:10:42.872Z"
   },
   {
    "duration": 188,
    "start_time": "2022-03-12T21:10:42.875Z"
   },
   {
    "duration": 5449,
    "start_time": "2022-03-12T21:11:22.786Z"
   },
   {
    "duration": 5639,
    "start_time": "2022-03-12T21:11:40.704Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-12T21:11:56.689Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T21:12:07.011Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T21:12:10.947Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T21:12:15.522Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T21:12:21.226Z"
   },
   {
    "duration": 2521,
    "start_time": "2022-03-12T21:16:31.885Z"
   },
   {
    "duration": 74,
    "start_time": "2022-03-12T21:18:57.868Z"
   },
   {
    "duration": 32,
    "start_time": "2022-03-12T21:19:03.065Z"
   },
   {
    "duration": 188499,
    "start_time": "2022-03-12T21:19:40.827Z"
   },
   {
    "duration": 107,
    "start_time": "2022-03-12T21:22:49.328Z"
   },
   {
    "duration": 965,
    "start_time": "2022-03-12T21:22:48.472Z"
   },
   {
    "duration": 270,
    "start_time": "2022-03-12T21:23:17.072Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-12T21:23:42.340Z"
   },
   {
    "duration": 5881,
    "start_time": "2022-03-12T21:24:06.752Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T21:32:42.436Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-12T21:32:55.820Z"
   },
   {
    "duration": 5452,
    "start_time": "2022-03-12T21:33:27.782Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-12T21:46:40.077Z"
   },
   {
    "duration": 8305,
    "start_time": "2022-03-12T21:53:58.255Z"
   },
   {
    "duration": 5431,
    "start_time": "2022-03-12T21:55:45.808Z"
   },
   {
    "duration": 5678,
    "start_time": "2022-03-12T21:56:10.829Z"
   },
   {
    "duration": 5248,
    "start_time": "2022-03-12T21:56:22.090Z"
   },
   {
    "duration": 22259,
    "start_time": "2022-03-12T21:58:46.567Z"
   },
   {
    "duration": 34120,
    "start_time": "2022-03-12T22:01:45.919Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T22:07:22.814Z"
   },
   {
    "duration": 17020,
    "start_time": "2022-03-12T22:08:13.839Z"
   },
   {
    "duration": 1637,
    "start_time": "2022-03-12T22:12:15.835Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T22:12:21.413Z"
   },
   {
    "duration": 74,
    "start_time": "2022-03-12T22:13:28.306Z"
   },
   {
    "duration": 71,
    "start_time": "2022-03-12T22:18:06.958Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-12T22:33:13.408Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-12T22:33:56.093Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T22:34:08.735Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-12T22:34:50.740Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T22:34:59.169Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-12T22:35:45.883Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T22:35:50.994Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-12T22:36:16.344Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T22:36:23.990Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T22:40:29.378Z"
   },
   {
    "duration": 5119,
    "start_time": "2022-03-12T22:41:43.857Z"
   },
   {
    "duration": 207,
    "start_time": "2022-03-12T22:42:03.889Z"
   },
   {
    "duration": 401,
    "start_time": "2022-03-12T22:42:27.156Z"
   },
   {
    "duration": 68,
    "start_time": "2022-03-12T22:42:34.268Z"
   },
   {
    "duration": 5287,
    "start_time": "2022-03-12T22:42:38.525Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T22:51:42.971Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-12T22:53:34.959Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T22:53:42.771Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-12T22:54:44.792Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T22:54:49.462Z"
   },
   {
    "duration": 662,
    "start_time": "2022-03-12T23:12:22.731Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:12:23.395Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-12T23:12:23.405Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T23:12:23.422Z"
   },
   {
    "duration": 31,
    "start_time": "2022-03-12T23:12:23.433Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-12T23:12:23.466Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T23:12:23.472Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:12:23.485Z"
   },
   {
    "duration": 5349,
    "start_time": "2022-03-12T23:12:23.495Z"
   },
   {
    "duration": 1605,
    "start_time": "2022-03-12T23:12:27.243Z"
   },
   {
    "duration": 1585,
    "start_time": "2022-03-12T23:12:27.264Z"
   },
   {
    "duration": 1581,
    "start_time": "2022-03-12T23:12:27.269Z"
   },
   {
    "duration": 1562,
    "start_time": "2022-03-12T23:12:27.288Z"
   },
   {
    "duration": 1558,
    "start_time": "2022-03-12T23:12:27.293Z"
   },
   {
    "duration": 1543,
    "start_time": "2022-03-12T23:12:27.309Z"
   },
   {
    "duration": 1535,
    "start_time": "2022-03-12T23:12:27.318Z"
   },
   {
    "duration": 1517,
    "start_time": "2022-03-12T23:12:27.337Z"
   },
   {
    "duration": 1499,
    "start_time": "2022-03-12T23:12:27.356Z"
   },
   {
    "duration": 1495,
    "start_time": "2022-03-12T23:12:27.361Z"
   },
   {
    "duration": 893,
    "start_time": "2022-03-12T23:12:27.964Z"
   },
   {
    "duration": 882,
    "start_time": "2022-03-12T23:12:27.976Z"
   },
   {
    "duration": 879,
    "start_time": "2022-03-12T23:12:27.980Z"
   },
   {
    "duration": 875,
    "start_time": "2022-03-12T23:12:27.985Z"
   },
   {
    "duration": 870,
    "start_time": "2022-03-12T23:12:27.991Z"
   },
   {
    "duration": 866,
    "start_time": "2022-03-12T23:12:27.996Z"
   },
   {
    "duration": 861,
    "start_time": "2022-03-12T23:12:28.002Z"
   },
   {
    "duration": 850,
    "start_time": "2022-03-12T23:12:28.013Z"
   },
   {
    "duration": 846,
    "start_time": "2022-03-12T23:12:28.018Z"
   },
   {
    "duration": 841,
    "start_time": "2022-03-12T23:12:28.024Z"
   },
   {
    "duration": 838,
    "start_time": "2022-03-12T23:12:28.028Z"
   },
   {
    "duration": 833,
    "start_time": "2022-03-12T23:12:28.034Z"
   },
   {
    "duration": 828,
    "start_time": "2022-03-12T23:12:28.040Z"
   },
   {
    "duration": 810,
    "start_time": "2022-03-12T23:12:28.058Z"
   },
   {
    "duration": 805,
    "start_time": "2022-03-12T23:12:28.064Z"
   },
   {
    "duration": 797,
    "start_time": "2022-03-12T23:12:28.073Z"
   },
   {
    "duration": 794,
    "start_time": "2022-03-12T23:12:28.077Z"
   },
   {
    "duration": 778,
    "start_time": "2022-03-12T23:12:28.094Z"
   },
   {
    "duration": 772,
    "start_time": "2022-03-12T23:12:28.101Z"
   },
   {
    "duration": 767,
    "start_time": "2022-03-12T23:12:28.107Z"
   },
   {
    "duration": 754,
    "start_time": "2022-03-12T23:12:28.120Z"
   },
   {
    "duration": 750,
    "start_time": "2022-03-12T23:12:28.125Z"
   },
   {
    "duration": 746,
    "start_time": "2022-03-12T23:12:28.130Z"
   },
   {
    "duration": 733,
    "start_time": "2022-03-12T23:12:28.144Z"
   },
   {
    "duration": 730,
    "start_time": "2022-03-12T23:12:28.148Z"
   },
   {
    "duration": 725,
    "start_time": "2022-03-12T23:12:28.154Z"
   },
   {
    "duration": 722,
    "start_time": "2022-03-12T23:12:28.158Z"
   },
   {
    "duration": 707,
    "start_time": "2022-03-12T23:12:28.174Z"
   },
   {
    "duration": 703,
    "start_time": "2022-03-12T23:12:28.179Z"
   },
   {
    "duration": 697,
    "start_time": "2022-03-12T23:12:28.186Z"
   },
   {
    "duration": 694,
    "start_time": "2022-03-12T23:12:28.190Z"
   },
   {
    "duration": 690,
    "start_time": "2022-03-12T23:12:28.195Z"
   },
   {
    "duration": 686,
    "start_time": "2022-03-12T23:12:28.199Z"
   },
   {
    "duration": 671,
    "start_time": "2022-03-12T23:12:28.215Z"
   },
   {
    "duration": 667,
    "start_time": "2022-03-12T23:12:28.220Z"
   },
   {
    "duration": 664,
    "start_time": "2022-03-12T23:12:28.224Z"
   },
   {
    "duration": 651,
    "start_time": "2022-03-12T23:12:28.238Z"
   },
   {
    "duration": 646,
    "start_time": "2022-03-12T23:12:28.243Z"
   },
   {
    "duration": 635,
    "start_time": "2022-03-12T23:12:28.255Z"
   },
   {
    "duration": 631,
    "start_time": "2022-03-12T23:12:28.260Z"
   },
   {
    "duration": 626,
    "start_time": "2022-03-12T23:12:28.266Z"
   },
   {
    "duration": 613,
    "start_time": "2022-03-12T23:12:28.280Z"
   },
   {
    "duration": 609,
    "start_time": "2022-03-12T23:12:28.285Z"
   },
   {
    "duration": 599,
    "start_time": "2022-03-12T23:12:28.296Z"
   },
   {
    "duration": 595,
    "start_time": "2022-03-12T23:12:28.301Z"
   },
   {
    "duration": 583,
    "start_time": "2022-03-12T23:12:28.314Z"
   },
   {
    "duration": 557,
    "start_time": "2022-03-12T23:12:28.340Z"
   },
   {
    "duration": 544,
    "start_time": "2022-03-12T23:12:28.354Z"
   },
   {
    "duration": 531,
    "start_time": "2022-03-12T23:12:28.368Z"
   },
   {
    "duration": 525,
    "start_time": "2022-03-12T23:12:28.375Z"
   },
   {
    "duration": 504,
    "start_time": "2022-03-12T23:12:28.396Z"
   },
   {
    "duration": 359,
    "start_time": "2022-03-12T23:12:28.542Z"
   },
   {
    "duration": 319,
    "start_time": "2022-03-12T23:12:28.583Z"
   },
   {
    "duration": 312,
    "start_time": "2022-03-12T23:12:28.591Z"
   },
   {
    "duration": 268,
    "start_time": "2022-03-12T23:12:28.694Z"
   },
   {
    "duration": 265,
    "start_time": "2022-03-12T23:12:28.699Z"
   },
   {
    "duration": 260,
    "start_time": "2022-03-12T23:12:28.705Z"
   },
   {
    "duration": 255,
    "start_time": "2022-03-12T23:12:28.711Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-12T23:12:49.044Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-12T23:18:12.814Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-12T23:18:30.406Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:19:01.575Z"
   },
   {
    "duration": 5271,
    "start_time": "2022-03-12T23:21:49.956Z"
   },
   {
    "duration": 208,
    "start_time": "2022-03-12T23:22:21.376Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-12T23:22:54.935Z"
   },
   {
    "duration": 37,
    "start_time": "2022-03-12T23:25:05.607Z"
   },
   {
    "duration": 36,
    "start_time": "2022-03-12T23:25:44.246Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T23:26:08.309Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-12T23:26:44.556Z"
   },
   {
    "duration": 222,
    "start_time": "2022-03-12T23:28:27.674Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-12T23:29:18.747Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:30:03.628Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-12T23:31:26.962Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:33:10.424Z"
   },
   {
    "duration": 27,
    "start_time": "2022-03-12T23:33:56.942Z"
   },
   {
    "duration": 219,
    "start_time": "2022-03-12T23:39:52.755Z"
   },
   {
    "duration": 263,
    "start_time": "2022-03-12T23:40:08.912Z"
   },
   {
    "duration": 239,
    "start_time": "2022-03-12T23:40:14.430Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:40:46.097Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:40:56.016Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:41:03.389Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:41:07.650Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:43:46.916Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:43:53.875Z"
   },
   {
    "duration": 34,
    "start_time": "2022-03-12T23:47:33.457Z"
   },
   {
    "duration": 646,
    "start_time": "2022-03-12T23:47:45.458Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:47:46.106Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-12T23:47:46.115Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T23:47:46.132Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-12T23:47:46.144Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T23:47:46.165Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:47:46.177Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-12T23:47:46.186Z"
   },
   {
    "duration": 35,
    "start_time": "2022-03-12T23:47:46.200Z"
   },
   {
    "duration": 41,
    "start_time": "2022-03-12T23:47:46.237Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-12T23:47:46.280Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-12T23:47:46.300Z"
   },
   {
    "duration": 72,
    "start_time": "2022-03-12T23:47:46.326Z"
   },
   {
    "duration": 1418,
    "start_time": "2022-03-12T23:47:44.983Z"
   },
   {
    "duration": 1414,
    "start_time": "2022-03-12T23:47:44.989Z"
   },
   {
    "duration": 1410,
    "start_time": "2022-03-12T23:47:44.994Z"
   },
   {
    "duration": 1406,
    "start_time": "2022-03-12T23:47:44.999Z"
   },
   {
    "duration": 1402,
    "start_time": "2022-03-12T23:47:45.005Z"
   },
   {
    "duration": 1397,
    "start_time": "2022-03-12T23:47:45.011Z"
   },
   {
    "duration": 1394,
    "start_time": "2022-03-12T23:47:45.015Z"
   },
   {
    "duration": 1388,
    "start_time": "2022-03-12T23:47:45.022Z"
   },
   {
    "duration": 1384,
    "start_time": "2022-03-12T23:47:45.027Z"
   },
   {
    "duration": 1372,
    "start_time": "2022-03-12T23:47:45.040Z"
   },
   {
    "duration": 1331,
    "start_time": "2022-03-12T23:47:45.082Z"
   },
   {
    "duration": 1325,
    "start_time": "2022-03-12T23:47:45.089Z"
   },
   {
    "duration": 1322,
    "start_time": "2022-03-12T23:47:45.093Z"
   },
   {
    "duration": 1317,
    "start_time": "2022-03-12T23:47:45.099Z"
   },
   {
    "duration": 1313,
    "start_time": "2022-03-12T23:47:45.104Z"
   },
   {
    "duration": 1306,
    "start_time": "2022-03-12T23:47:45.112Z"
   },
   {
    "duration": 1295,
    "start_time": "2022-03-12T23:47:45.124Z"
   },
   {
    "duration": 1290,
    "start_time": "2022-03-12T23:47:45.129Z"
   },
   {
    "duration": 1286,
    "start_time": "2022-03-12T23:47:45.134Z"
   },
   {
    "duration": 1282,
    "start_time": "2022-03-12T23:47:45.139Z"
   },
   {
    "duration": 1279,
    "start_time": "2022-03-12T23:47:45.143Z"
   },
   {
    "duration": 1274,
    "start_time": "2022-03-12T23:47:45.149Z"
   },
   {
    "duration": 1269,
    "start_time": "2022-03-12T23:47:45.155Z"
   },
   {
    "duration": 1264,
    "start_time": "2022-03-12T23:47:45.160Z"
   },
   {
    "duration": 1261,
    "start_time": "2022-03-12T23:47:45.164Z"
   },
   {
    "duration": 1257,
    "start_time": "2022-03-12T23:47:45.169Z"
   },
   {
    "duration": 1253,
    "start_time": "2022-03-12T23:47:45.174Z"
   },
   {
    "duration": 1250,
    "start_time": "2022-03-12T23:47:45.178Z"
   },
   {
    "duration": 1225,
    "start_time": "2022-03-12T23:47:45.203Z"
   },
   {
    "duration": 1220,
    "start_time": "2022-03-12T23:47:45.209Z"
   },
   {
    "duration": 1217,
    "start_time": "2022-03-12T23:47:45.213Z"
   },
   {
    "duration": 1212,
    "start_time": "2022-03-12T23:47:45.219Z"
   },
   {
    "duration": 1209,
    "start_time": "2022-03-12T23:47:45.223Z"
   },
   {
    "duration": 1206,
    "start_time": "2022-03-12T23:47:45.227Z"
   },
   {
    "duration": 1202,
    "start_time": "2022-03-12T23:47:45.232Z"
   },
   {
    "duration": 1198,
    "start_time": "2022-03-12T23:47:45.237Z"
   },
   {
    "duration": 1195,
    "start_time": "2022-03-12T23:47:45.241Z"
   },
   {
    "duration": 1186,
    "start_time": "2022-03-12T23:47:45.251Z"
   },
   {
    "duration": 1176,
    "start_time": "2022-03-12T23:47:45.261Z"
   },
   {
    "duration": 1171,
    "start_time": "2022-03-12T23:47:45.267Z"
   },
   {
    "duration": 1164,
    "start_time": "2022-03-12T23:47:45.275Z"
   },
   {
    "duration": 1182,
    "start_time": "2022-03-12T23:47:45.281Z"
   },
   {
    "duration": 1178,
    "start_time": "2022-03-12T23:47:45.286Z"
   },
   {
    "duration": 1173,
    "start_time": "2022-03-12T23:47:45.292Z"
   },
   {
    "duration": 1168,
    "start_time": "2022-03-12T23:47:45.298Z"
   },
   {
    "duration": 1152,
    "start_time": "2022-03-12T23:47:45.314Z"
   },
   {
    "duration": 1148,
    "start_time": "2022-03-12T23:47:45.319Z"
   },
   {
    "duration": 1145,
    "start_time": "2022-03-12T23:47:45.323Z"
   },
   {
    "duration": 1141,
    "start_time": "2022-03-12T23:47:45.328Z"
   },
   {
    "duration": 1134,
    "start_time": "2022-03-12T23:47:45.336Z"
   },
   {
    "duration": 1129,
    "start_time": "2022-03-12T23:47:45.342Z"
   },
   {
    "duration": 1125,
    "start_time": "2022-03-12T23:47:45.347Z"
   },
   {
    "duration": 1120,
    "start_time": "2022-03-12T23:47:45.352Z"
   },
   {
    "duration": 1115,
    "start_time": "2022-03-12T23:47:45.358Z"
   },
   {
    "duration": 1112,
    "start_time": "2022-03-12T23:47:45.362Z"
   },
   {
    "duration": 1109,
    "start_time": "2022-03-12T23:47:45.366Z"
   },
   {
    "duration": 1106,
    "start_time": "2022-03-12T23:47:45.370Z"
   },
   {
    "duration": 1103,
    "start_time": "2022-03-12T23:47:45.374Z"
   },
   {
    "duration": 1100,
    "start_time": "2022-03-12T23:47:45.378Z"
   },
   {
    "duration": 1096,
    "start_time": "2022-03-12T23:47:45.382Z"
   },
   {
    "duration": 1092,
    "start_time": "2022-03-12T23:47:45.387Z"
   },
   {
    "duration": 1088,
    "start_time": "2022-03-12T23:47:45.392Z"
   },
   {
    "duration": 1084,
    "start_time": "2022-03-12T23:47:45.397Z"
   },
   {
    "duration": 1080,
    "start_time": "2022-03-12T23:47:45.402Z"
   },
   {
    "duration": 69,
    "start_time": "2022-03-12T23:48:15.558Z"
   },
   {
    "duration": 150,
    "start_time": "2022-03-12T23:48:35.783Z"
   },
   {
    "duration": 72,
    "start_time": "2022-03-12T23:48:43.815Z"
   },
   {
    "duration": 593,
    "start_time": "2022-03-12T23:49:49.306Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:49:49.901Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-12T23:49:49.909Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-12T23:49:49.926Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-12T23:49:49.938Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:49:49.963Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T23:49:49.972Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T23:49:49.983Z"
   },
   {
    "duration": 38,
    "start_time": "2022-03-12T23:49:49.994Z"
   },
   {
    "duration": 46,
    "start_time": "2022-03-12T23:49:50.033Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-12T23:49:50.080Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-12T23:49:50.102Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:49:50.129Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-12T23:49:50.163Z"
   },
   {
    "duration": 339,
    "start_time": "2022-03-12T23:49:50.177Z"
   },
   {
    "duration": 1646,
    "start_time": "2022-03-12T23:49:48.873Z"
   },
   {
    "duration": 1643,
    "start_time": "2022-03-12T23:49:48.877Z"
   },
   {
    "duration": 1638,
    "start_time": "2022-03-12T23:49:48.883Z"
   },
   {
    "duration": 1633,
    "start_time": "2022-03-12T23:49:48.889Z"
   },
   {
    "duration": 1630,
    "start_time": "2022-03-12T23:49:48.893Z"
   },
   {
    "duration": 1615,
    "start_time": "2022-03-12T23:49:48.909Z"
   },
   {
    "duration": 1611,
    "start_time": "2022-03-12T23:49:48.914Z"
   },
   {
    "duration": 1601,
    "start_time": "2022-03-12T23:49:48.926Z"
   },
   {
    "duration": 1598,
    "start_time": "2022-03-12T23:49:48.930Z"
   },
   {
    "duration": 1592,
    "start_time": "2022-03-12T23:49:48.937Z"
   },
   {
    "duration": 1586,
    "start_time": "2022-03-12T23:49:48.944Z"
   },
   {
    "duration": 1558,
    "start_time": "2022-03-12T23:49:48.973Z"
   },
   {
    "duration": 1551,
    "start_time": "2022-03-12T23:49:48.981Z"
   },
   {
    "duration": 1547,
    "start_time": "2022-03-12T23:49:48.986Z"
   },
   {
    "duration": 1543,
    "start_time": "2022-03-12T23:49:48.991Z"
   },
   {
    "duration": 1540,
    "start_time": "2022-03-12T23:49:48.995Z"
   },
   {
    "duration": 1537,
    "start_time": "2022-03-12T23:49:48.999Z"
   },
   {
    "duration": 1533,
    "start_time": "2022-03-12T23:49:49.004Z"
   },
   {
    "duration": 1525,
    "start_time": "2022-03-12T23:49:49.013Z"
   },
   {
    "duration": 1520,
    "start_time": "2022-03-12T23:49:49.019Z"
   },
   {
    "duration": 1517,
    "start_time": "2022-03-12T23:49:49.023Z"
   },
   {
    "duration": 1513,
    "start_time": "2022-03-12T23:49:49.028Z"
   },
   {
    "duration": 1508,
    "start_time": "2022-03-12T23:49:49.034Z"
   },
   {
    "duration": 1498,
    "start_time": "2022-03-12T23:49:49.045Z"
   },
   {
    "duration": 1491,
    "start_time": "2022-03-12T23:49:49.052Z"
   },
   {
    "duration": 1483,
    "start_time": "2022-03-12T23:49:49.062Z"
   },
   {
    "duration": 1480,
    "start_time": "2022-03-12T23:49:49.066Z"
   },
   {
    "duration": 1456,
    "start_time": "2022-03-12T23:49:49.091Z"
   },
   {
    "duration": 1453,
    "start_time": "2022-03-12T23:49:49.095Z"
   },
   {
    "duration": 1315,
    "start_time": "2022-03-12T23:49:49.235Z"
   },
   {
    "duration": 1286,
    "start_time": "2022-03-12T23:49:49.264Z"
   },
   {
    "duration": 1280,
    "start_time": "2022-03-12T23:49:49.271Z"
   },
   {
    "duration": 1275,
    "start_time": "2022-03-12T23:49:49.277Z"
   },
   {
    "duration": 1271,
    "start_time": "2022-03-12T23:49:49.282Z"
   },
   {
    "duration": 1268,
    "start_time": "2022-03-12T23:49:49.286Z"
   },
   {
    "duration": 1264,
    "start_time": "2022-03-12T23:49:49.292Z"
   },
   {
    "duration": 1261,
    "start_time": "2022-03-12T23:49:49.296Z"
   },
   {
    "duration": 1248,
    "start_time": "2022-03-12T23:49:49.310Z"
   },
   {
    "duration": 1244,
    "start_time": "2022-03-12T23:49:49.314Z"
   },
   {
    "duration": 1240,
    "start_time": "2022-03-12T23:49:49.319Z"
   },
   {
    "duration": 1236,
    "start_time": "2022-03-12T23:49:49.323Z"
   },
   {
    "duration": 1232,
    "start_time": "2022-03-12T23:49:49.328Z"
   },
   {
    "duration": 1228,
    "start_time": "2022-03-12T23:49:49.333Z"
   },
   {
    "duration": 1222,
    "start_time": "2022-03-12T23:49:49.339Z"
   },
   {
    "duration": 1198,
    "start_time": "2022-03-12T23:49:49.364Z"
   },
   {
    "duration": 1193,
    "start_time": "2022-03-12T23:49:49.370Z"
   },
   {
    "duration": 1189,
    "start_time": "2022-03-12T23:49:49.375Z"
   },
   {
    "duration": 1184,
    "start_time": "2022-03-12T23:49:49.380Z"
   },
   {
    "duration": 1179,
    "start_time": "2022-03-12T23:49:49.386Z"
   },
   {
    "duration": 1176,
    "start_time": "2022-03-12T23:49:49.390Z"
   },
   {
    "duration": 1172,
    "start_time": "2022-03-12T23:49:49.395Z"
   },
   {
    "duration": 1169,
    "start_time": "2022-03-12T23:49:49.399Z"
   },
   {
    "duration": 1165,
    "start_time": "2022-03-12T23:49:49.404Z"
   },
   {
    "duration": 1154,
    "start_time": "2022-03-12T23:49:49.416Z"
   },
   {
    "duration": 1150,
    "start_time": "2022-03-12T23:49:49.421Z"
   },
   {
    "duration": 1147,
    "start_time": "2022-03-12T23:49:49.425Z"
   },
   {
    "duration": 1143,
    "start_time": "2022-03-12T23:49:49.429Z"
   },
   {
    "duration": 1138,
    "start_time": "2022-03-12T23:49:49.435Z"
   },
   {
    "duration": 1134,
    "start_time": "2022-03-12T23:49:49.440Z"
   },
   {
    "duration": 1130,
    "start_time": "2022-03-12T23:49:49.445Z"
   },
   {
    "duration": 1127,
    "start_time": "2022-03-12T23:49:49.449Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-12T23:50:26.968Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-12T23:51:38.381Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-12T23:52:03.983Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-12T23:52:27.718Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-12T23:52:49.467Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:53:16.064Z"
   },
   {
    "duration": 219,
    "start_time": "2022-03-12T23:53:18.228Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:53:19.242Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:53:20.214Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:53:21.047Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:53:21.765Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:53:22.464Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-12T23:53:23.113Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:53:23.455Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:53:24.068Z"
   },
   {
    "duration": 208,
    "start_time": "2022-03-12T23:53:24.359Z"
   },
   {
    "duration": 218,
    "start_time": "2022-03-12T23:53:24.655Z"
   },
   {
    "duration": 76,
    "start_time": "2022-03-12T23:54:10.881Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-12T23:54:20.796Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-12T23:54:32.884Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:54:41.625Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:54:58.210Z"
   },
   {
    "duration": 108,
    "start_time": "2022-03-12T23:55:05.497Z"
   },
   {
    "duration": 24,
    "start_time": "2022-03-12T23:56:31.573Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-12T23:57:33.944Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-12T23:58:37.092Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:58:44.501Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-12T23:58:48.101Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-12T23:58:54.490Z"
   },
   {
    "duration": 35,
    "start_time": "2022-03-12T23:58:55.450Z"
   },
   {
    "duration": 224,
    "start_time": "2022-03-13T00:05:48.616Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-13T00:05:56.631Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-13T00:06:05.838Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-13T00:06:15.726Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-13T00:06:20.267Z"
   },
   {
    "duration": 78,
    "start_time": "2022-03-13T00:07:22.694Z"
   },
   {
    "duration": 75,
    "start_time": "2022-03-13T00:07:27.625Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-13T00:07:39.346Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-13T00:08:00.056Z"
   },
   {
    "duration": 238,
    "start_time": "2022-03-13T00:08:16.946Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-13T00:08:21.560Z"
   },
   {
    "duration": 228,
    "start_time": "2022-03-13T00:08:54.646Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-13T00:09:06.695Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-13T00:09:17.703Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-13T00:10:09.209Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-13T00:10:17.453Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-13T00:10:21.640Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-13T00:10:23.844Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-13T00:10:52.095Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-13T00:11:08.388Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-13T00:11:17.179Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-13T00:12:13.178Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-13T00:12:24.265Z"
   },
   {
    "duration": 228,
    "start_time": "2022-03-13T00:13:04.964Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-13T00:13:11.047Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-13T00:14:14.732Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-13T00:14:36.043Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-13T00:14:54.613Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-13T00:14:57.937Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-13T00:14:58.611Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-13T00:15:26.891Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-13T00:18:00.530Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-13T00:19:39.757Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-13T00:20:59.364Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-13T00:21:21.530Z"
   },
   {
    "duration": 71,
    "start_time": "2022-03-13T00:21:25.952Z"
   },
   {
    "duration": 73,
    "start_time": "2022-03-13T00:21:34.120Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-13T00:21:41.924Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-13T00:23:47.962Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-13T00:24:15.822Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-13T00:24:25.503Z"
   },
   {
    "duration": 842,
    "start_time": "2022-03-14T19:39:54.697Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-14T19:39:55.858Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-14T19:39:56.947Z"
   },
   {
    "duration": 24,
    "start_time": "2022-03-14T19:40:01.022Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-14T19:40:02.671Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-14T19:40:55.313Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-14T19:41:12.182Z"
   },
   {
    "duration": 335,
    "start_time": "2022-03-14T19:44:05.188Z"
   },
   {
    "duration": 603,
    "start_time": "2022-03-14T19:45:55.957Z"
   },
   {
    "duration": 625,
    "start_time": "2022-03-14T19:46:05.336Z"
   },
   {
    "duration": 648,
    "start_time": "2022-03-14T19:46:14.288Z"
   },
   {
    "duration": 235,
    "start_time": "2022-03-14T19:46:41.620Z"
   },
   {
    "duration": 220,
    "start_time": "2022-03-14T19:48:57.472Z"
   },
   {
    "duration": 245,
    "start_time": "2022-03-14T19:49:41.746Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-14T19:51:16.911Z"
   },
   {
    "duration": 940,
    "start_time": "2022-03-14T19:56:51.255Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-14T20:03:57.124Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-14T20:09:53.560Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-14T20:11:24.522Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-14T20:11:53.637Z"
   },
   {
    "duration": 597,
    "start_time": "2022-03-15T02:25:16.375Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:25:17.310Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-15T02:25:17.963Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-15T02:25:20.083Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-15T02:25:20.504Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-15T02:25:20.874Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-15T02:25:23.214Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:25:25.314Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-15T02:26:04.279Z"
   },
   {
    "duration": 225,
    "start_time": "2022-03-15T02:26:40.804Z"
   },
   {
    "duration": 173,
    "start_time": "2022-03-15T02:26:47.790Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-15T02:26:55.251Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:27:48.266Z"
   },
   {
    "duration": 36,
    "start_time": "2022-03-15T02:28:26.388Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-15T02:28:36.088Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-15T02:28:37.740Z"
   },
   {
    "duration": 28,
    "start_time": "2022-03-15T02:28:40.830Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-15T02:28:52.158Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-15T02:28:52.401Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:52.910Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-15T02:28:53.083Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-15T02:28:53.239Z"
   },
   {
    "duration": 173,
    "start_time": "2022-03-15T02:28:53.585Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-15T02:28:53.755Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-15T02:28:53.867Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-15T02:28:53.911Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:28:54.076Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-15T02:28:54.275Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:54.407Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-15T02:28:54.490Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:28:54.661Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-15T02:28:54.740Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-15T02:28:54.907Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:28:55.001Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-15T02:28:55.084Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-15T02:28:55.303Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-15T02:28:55.411Z"
   },
   {
    "duration": 37,
    "start_time": "2022-03-15T02:28:55.500Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-15T02:28:55.610Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-15T02:28:55.962Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-15T02:28:56.007Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-15T02:28:56.086Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-15T02:28:56.173Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:56.260Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:56.582Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:56.673Z"
   },
   {
    "duration": 53,
    "start_time": "2022-03-15T02:28:57.011Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-15T02:28:57.165Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-15T02:28:57.255Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:28:57.401Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-15T02:28:57.593Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:57.676Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-15T02:28:57.756Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-15T02:28:58.116Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-15T02:28:58.177Z"
   },
   {
    "duration": 45,
    "start_time": "2022-03-15T02:28:58.262Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-15T02:28:58.457Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-15T02:28:58.604Z"
   },
   {
    "duration": 82,
    "start_time": "2022-03-15T09:13:16.968Z"
   },
   {
    "duration": 68,
    "start_time": "2022-03-15T09:14:53.862Z"
   },
   {
    "duration": 208,
    "start_time": "2022-03-17T00:55:35.883Z"
   },
   {
    "duration": 913,
    "start_time": "2022-03-17T00:56:01.198Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T00:56:02.113Z"
   },
   {
    "duration": 31,
    "start_time": "2022-03-17T00:56:02.123Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-17T00:56:02.156Z"
   },
   {
    "duration": 28,
    "start_time": "2022-03-17T00:56:02.178Z"
   },
   {
    "duration": 37,
    "start_time": "2022-03-17T00:56:02.208Z"
   },
   {
    "duration": 35,
    "start_time": "2022-03-17T00:56:02.246Z"
   },
   {
    "duration": 36,
    "start_time": "2022-03-17T00:56:02.283Z"
   },
   {
    "duration": 45,
    "start_time": "2022-03-17T00:56:02.322Z"
   },
   {
    "duration": 45,
    "start_time": "2022-03-17T00:56:02.369Z"
   },
   {
    "duration": 61,
    "start_time": "2022-03-17T00:56:02.416Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-17T00:56:02.479Z"
   },
   {
    "duration": 44,
    "start_time": "2022-03-17T00:56:02.496Z"
   },
   {
    "duration": 28,
    "start_time": "2022-03-17T00:56:02.542Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-17T00:56:02.572Z"
   },
   {
    "duration": 44,
    "start_time": "2022-03-17T00:56:02.592Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-17T00:56:02.638Z"
   },
   {
    "duration": 39,
    "start_time": "2022-03-17T00:56:02.658Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T00:56:02.698Z"
   },
   {
    "duration": 263,
    "start_time": "2022-03-17T00:56:02.706Z"
   },
   {
    "duration": -167,
    "start_time": "2022-03-17T00:56:03.140Z"
   },
   {
    "duration": -169,
    "start_time": "2022-03-17T00:56:03.143Z"
   },
   {
    "duration": -171,
    "start_time": "2022-03-17T00:56:03.147Z"
   },
   {
    "duration": -173,
    "start_time": "2022-03-17T00:56:03.150Z"
   },
   {
    "duration": -175,
    "start_time": "2022-03-17T00:56:03.154Z"
   },
   {
    "duration": -177,
    "start_time": "2022-03-17T00:56:03.157Z"
   },
   {
    "duration": -178,
    "start_time": "2022-03-17T00:56:03.160Z"
   },
   {
    "duration": -181,
    "start_time": "2022-03-17T00:56:03.164Z"
   },
   {
    "duration": -182,
    "start_time": "2022-03-17T00:56:03.167Z"
   },
   {
    "duration": -184,
    "start_time": "2022-03-17T00:56:03.170Z"
   },
   {
    "duration": -186,
    "start_time": "2022-03-17T00:56:03.174Z"
   },
   {
    "duration": -188,
    "start_time": "2022-03-17T00:56:03.177Z"
   },
   {
    "duration": -190,
    "start_time": "2022-03-17T00:56:03.180Z"
   },
   {
    "duration": -192,
    "start_time": "2022-03-17T00:56:03.184Z"
   },
   {
    "duration": -194,
    "start_time": "2022-03-17T00:56:03.187Z"
   },
   {
    "duration": -197,
    "start_time": "2022-03-17T00:56:03.191Z"
   },
   {
    "duration": -198,
    "start_time": "2022-03-17T00:56:03.194Z"
   },
   {
    "duration": -200,
    "start_time": "2022-03-17T00:56:03.197Z"
   },
   {
    "duration": -202,
    "start_time": "2022-03-17T00:56:03.201Z"
   },
   {
    "duration": -204,
    "start_time": "2022-03-17T00:56:03.204Z"
   },
   {
    "duration": -206,
    "start_time": "2022-03-17T00:56:03.208Z"
   },
   {
    "duration": -222,
    "start_time": "2022-03-17T00:56:03.225Z"
   },
   {
    "duration": -226,
    "start_time": "2022-03-17T00:56:03.230Z"
   },
   {
    "duration": -228,
    "start_time": "2022-03-17T00:56:03.234Z"
   },
   {
    "duration": -232,
    "start_time": "2022-03-17T00:56:03.239Z"
   },
   {
    "duration": -235,
    "start_time": "2022-03-17T00:56:03.243Z"
   },
   {
    "duration": -236,
    "start_time": "2022-03-17T00:56:03.246Z"
   },
   {
    "duration": -212,
    "start_time": "2022-03-17T00:56:03.249Z"
   },
   {
    "duration": -215,
    "start_time": "2022-03-17T00:56:03.253Z"
   },
   {
    "duration": -216,
    "start_time": "2022-03-17T00:56:03.256Z"
   },
   {
    "duration": -218,
    "start_time": "2022-03-17T00:56:03.260Z"
   },
   {
    "duration": -220,
    "start_time": "2022-03-17T00:56:03.263Z"
   },
   {
    "duration": -221,
    "start_time": "2022-03-17T00:56:03.266Z"
   },
   {
    "duration": -223,
    "start_time": "2022-03-17T00:56:03.269Z"
   },
   {
    "duration": -224,
    "start_time": "2022-03-17T00:56:03.272Z"
   },
   {
    "duration": -226,
    "start_time": "2022-03-17T00:56:03.275Z"
   },
   {
    "duration": -229,
    "start_time": "2022-03-17T00:56:03.279Z"
   },
   {
    "duration": -230,
    "start_time": "2022-03-17T00:56:03.282Z"
   },
   {
    "duration": -232,
    "start_time": "2022-03-17T00:56:03.286Z"
   },
   {
    "duration": -233,
    "start_time": "2022-03-17T00:56:03.288Z"
   },
   {
    "duration": -235,
    "start_time": "2022-03-17T00:56:03.292Z"
   },
   {
    "duration": -237,
    "start_time": "2022-03-17T00:56:03.295Z"
   },
   {
    "duration": -242,
    "start_time": "2022-03-17T00:56:03.301Z"
   },
   {
    "duration": -377,
    "start_time": "2022-03-17T00:56:03.438Z"
   },
   {
    "duration": -426,
    "start_time": "2022-03-17T00:56:03.488Z"
   },
   {
    "duration": -463,
    "start_time": "2022-03-17T00:56:03.527Z"
   },
   {
    "duration": -513,
    "start_time": "2022-03-17T00:56:03.578Z"
   },
   {
    "duration": -548,
    "start_time": "2022-03-17T00:56:03.614Z"
   },
   {
    "duration": -567,
    "start_time": "2022-03-17T00:56:03.635Z"
   },
   {
    "duration": -570,
    "start_time": "2022-03-17T00:56:03.639Z"
   },
   {
    "duration": -572,
    "start_time": "2022-03-17T00:56:03.642Z"
   },
   {
    "duration": -573,
    "start_time": "2022-03-17T00:56:03.645Z"
   },
   {
    "duration": -575,
    "start_time": "2022-03-17T00:56:03.648Z"
   },
   {
    "duration": -577,
    "start_time": "2022-03-17T00:56:03.651Z"
   },
   {
    "duration": -578,
    "start_time": "2022-03-17T00:56:03.654Z"
   },
   {
    "duration": -526,
    "start_time": "2022-03-17T00:56:03.663Z"
   },
   {
    "duration": -528,
    "start_time": "2022-03-17T00:56:03.667Z"
   },
   {
    "duration": -529,
    "start_time": "2022-03-17T00:56:03.670Z"
   },
   {
    "duration": -532,
    "start_time": "2022-03-17T00:56:03.674Z"
   },
   {
    "duration": -534,
    "start_time": "2022-03-17T00:56:03.677Z"
   },
   {
    "duration": 4562,
    "start_time": "2022-03-17T00:56:30.106Z"
   },
   {
    "duration": 165,
    "start_time": "2022-03-17T00:57:07.591Z"
   },
   {
    "duration": 169,
    "start_time": "2022-03-17T00:57:16.352Z"
   },
   {
    "duration": 164,
    "start_time": "2022-03-17T00:57:44.134Z"
   },
   {
    "duration": 5127,
    "start_time": "2022-03-17T00:57:55.042Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T00:58:46.242Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T00:59:16.252Z"
   },
   {
    "duration": 206,
    "start_time": "2022-03-17T01:00:33.490Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-17T01:00:39.065Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:00:41.974Z"
   },
   {
    "duration": 49,
    "start_time": "2022-03-17T01:00:52.096Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:00:52.683Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-17T01:00:52.771Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:00:53.105Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:00:53.188Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-17T01:00:53.264Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:00:53.431Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:00:53.598Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-17T01:00:53.862Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-17T01:00:53.938Z"
   },
   {
    "duration": 36,
    "start_time": "2022-03-17T01:00:54.107Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-17T01:00:54.356Z"
   },
   {
    "duration": 22,
    "start_time": "2022-03-17T01:00:54.521Z"
   },
   {
    "duration": 29,
    "start_time": "2022-03-17T01:00:54.612Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T01:00:55.109Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-17T01:00:55.186Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:00:55.280Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-17T01:00:55.440Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T01:00:56.014Z"
   },
   {
    "duration": 242,
    "start_time": "2022-03-17T01:00:56.509Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:00:57.018Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:00:57.587Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:00:58.114Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:00:58.590Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T01:00:59.366Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:00:59.534Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:00:59.618Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:00:59.794Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-17T01:00:59.866Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-17T01:00:59.952Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T01:01:00.117Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-17T01:01:00.201Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:01:00.565Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T01:01:01.061Z"
   },
   {
    "duration": 39,
    "start_time": "2022-03-17T01:01:01.281Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-17T01:01:01.488Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:01:03.500Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-17T01:01:03.508Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-17T01:01:03.733Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-17T01:01:04.352Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:01:04.370Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:01:06.272Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:01:06.591Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T01:01:10.202Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:01:14.986Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-17T01:01:16.276Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T01:01:17.744Z"
   },
   {
    "duration": 19,
    "start_time": "2022-03-17T01:01:20.284Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T01:01:21.188Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T01:01:21.681Z"
   },
   {
    "duration": 173,
    "start_time": "2022-03-17T01:03:25.729Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-17T01:03:36.734Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:07:34.517Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-17T01:07:36.329Z"
   },
   {
    "duration": 43,
    "start_time": "2022-03-17T01:07:37.602Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-17T01:07:43.424Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:07:55.076Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T01:07:57.567Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:07:59.075Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-17T01:08:02.200Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-17T01:08:05.248Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-17T01:08:05.604Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-17T01:08:07.526Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-17T01:08:07.876Z"
   },
   {
    "duration": 7,
    "start_time": "2022-03-17T01:08:08.897Z"
   },
   {
    "duration": 5,
    "start_time": "2022-03-17T01:08:09.882Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-17T01:08:10.965Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-17T01:08:15.720Z"
   },
   {
    "duration": 3,
    "start_time": "2022-03-17T01:08:18.528Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-17T01:08:18.858Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-17T01:08:21.260Z"
   },
   {
    "duration": 18,
    "start_time": "2022-03-17T01:08:22.435Z"
   },
   {
    "duration": 4,
    "start_time": "2022-03-17T01:08:25.423Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-17T01:08:27.243Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-17T01:08:27.713Z"
   },
   {
    "duration": 385,
    "start_time": "2022-03-17T01:08:28.551Z"
   },
   {
    "duration": 56,
    "start_time": "2022-03-17T01:08:29.266Z"
   },
   {
    "duration": 16,
    "start_time": "2022-03-17T01:08:46.325Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-17T01:08:46.756Z"
   },
   {
    "duration": 14,
    "start_time": "2022-03-17T01:08:49.382Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-17T01:08:52.338Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-17T01:08:53.610Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-17T01:20:15.560Z"
   },
   {
    "duration": 15,
    "start_time": "2022-03-17T01:20:26.485Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "165px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
